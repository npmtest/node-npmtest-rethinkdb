{"/home/travis/build/npmtest/node-npmtest-rethinkdb/test.js":"/* istanbul instrument in package npmtest_rethinkdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/lib.npmtest_rethinkdb.js":"/* istanbul instrument in package npmtest_rethinkdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rethinkdb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rethinkdb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rethinkdb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rethinkdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rethinkdb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rethinkdb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rethinkdb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rethinkdb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rethinkdb.__dirname + '/lib.npmtest_rethinkdb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/rethinkdb.js":"// Generated by CoffeeScript 1.10.0\nvar error, net, rethinkdb;\n\nnet = require('./net');\n\nrethinkdb = require('./ast');\n\nerror = require('./errors');\n\nrethinkdb.connect = net.connect;\n\nrethinkdb.Error = error;\n\nrethinkdb._bluebird = require('bluebird');\n\nmodule.exports = rethinkdb;\n\nmodule.exports.net = net;\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/net.js":"// Generated by CoffeeScript 1.10.0\nvar Connection, HANDSHAKE_AUTHFAIL, HANDSHAKE_SUCCESS, HttpConnection, Promise, TcpConnection, ar, aropt, crypto, cursors, err, events, mkAtom, mkErr, net, pbkdf2_cache, protoProtocol, protoQueryType, protoResponseType, protoVersion, protoVersionNumber, protodef, r, tls, util, varar,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nnet = require('net');\n\ntls = require('tls');\n\nevents = require('events');\n\nutil = require('./util');\n\nerr = require('./errors');\n\ncursors = require('./cursor');\n\nprotodef = require('./proto-def');\n\ncrypto = require(\"crypto\");\n\nprotoVersion = protodef.VersionDummy.Version.V1_0;\n\nprotoVersionNumber = 0;\n\nprotoProtocol = protodef.VersionDummy.Protocol.JSON;\n\nprotoQueryType = protodef.Query.QueryType;\n\nprotoResponseType = protodef.Response.ResponseType;\n\nr = require('./ast');\n\nPromise = require('bluebird');\n\nar = util.ar;\n\nvarar = util.varar;\n\naropt = util.aropt;\n\nmkAtom = util.mkAtom;\n\nmkErr = util.mkErr;\n\nHANDSHAKE_SUCCESS = \"SUCCESS\";\n\nHANDSHAKE_AUTHFAIL = \"ERROR: Incorrect authorization key.\\n\";\n\nConnection = (function(superClass) {\n  extend(Connection, superClass);\n\n  Connection.prototype.DEFAULT_HOST = 'localhost';\n\n  Connection.prototype.DEFAULT_PORT = 28015;\n\n  Connection.prototype.DEFAULT_AUTH_KEY = '';\n\n  Connection.prototype.DEFAULT_TIMEOUT = 20;\n\n  function Connection(host, callback) {\n    var conCallback, errCallback;\n    if (typeof host === 'undefined') {\n      host = {};\n    } else if (typeof host === 'string') {\n      host = {\n        host: host\n      };\n    }\n    this.host = host.host || this.DEFAULT_HOST;\n    this.port = host.port || this.DEFAULT_PORT;\n    this.db = host.db;\n    this.authKey = host.authKey || this.DEFAULT_AUTH_KEY;\n    this.timeout = host.timeout || this.DEFAULT_TIMEOUT;\n    if (typeof host.ssl === 'boolean' && host.ssl) {\n      this.ssl = {};\n    } else if (typeof host.ssl === 'object') {\n      this.ssl = host.ssl;\n    } else {\n      this.ssl = false;\n    }\n    this.outstandingCallbacks = {};\n    this.nextToken = 1;\n    this.open = false;\n    this.closing = false;\n    this.buffer = new Buffer(0);\n    this._events = this._events || {};\n    errCallback = (function(_this) {\n      return function(e) {\n        _this.removeListener('connect', conCallback);\n        if (e instanceof err.ReqlError) {\n          return callback(e);\n        } else {\n          return callback(new err.ReqlDriverError(\"Could not connect to \" + _this.host + \":\" + _this.port + \".\\n\" + e.message));\n        }\n      };\n    })(this);\n    this.once('error', errCallback);\n    conCallback = (function(_this) {\n      return function() {\n        _this.removeListener('error', errCallback);\n        _this.open = true;\n        return callback(null, _this);\n      };\n    })(this);\n    this.once('connect', conCallback);\n    this._closePromise = null;\n  }\n\n  Connection.prototype._data = function(buf) {\n    var response, responseBuffer, responseLength, results, token;\n    this.buffer = Buffer.concat([this.buffer, buf]);\n    results = [];\n    while (this.buffer.length >= 12) {\n      token = this.buffer.readUInt32LE(0) + 0x100000000 * this.buffer.readUInt32LE(4);\n      responseLength = this.buffer.readUInt32LE(8);\n      if (!(this.buffer.length >= (12 + responseLength))) {\n        break;\n      }\n      responseBuffer = this.buffer.slice(12, responseLength + 12);\n      response = JSON.parse(responseBuffer);\n      this._processResponse(response, token);\n      results.push(this.buffer = this.buffer.slice(12 + responseLength));\n    }\n    return results;\n  };\n\n  Connection.prototype._delQuery = function(token) {\n    return delete this.outstandingCallbacks[token];\n  };\n\n  Connection.prototype._processResponse = function(response, token) {\n    var cb, cursor, errType, feed, k, len1, note, opts, profile, ref, ref1, root;\n    profile = response.p;\n    if (this.outstandingCallbacks[token] != null) {\n      ref = this.outstandingCallbacks[token], cb = ref.cb, root = ref.root, cursor = ref.cursor, opts = ref.opts, feed = ref.feed;\n      if (cursor != null) {\n        cursor._addResponse(response);\n        if (cursor._endFlag && cursor._outstandingRequests === 0) {\n          return this._delQuery(token);\n        }\n      } else if (cb != null) {\n        switch (response.t) {\n          case protoResponseType.COMPILE_ERROR:\n            cb(mkErr(err.ReqlServerCompileError, response, root));\n            return this._delQuery(token);\n          case protoResponseType.CLIENT_ERROR:\n            cb(mkErr(err.ReqlDriverError, response, root));\n            return this._delQuery(token);\n          case protoResponseType.RUNTIME_ERROR:\n            errType = util.errorClass(response.e);\n            cb(mkErr(errType, response, root));\n            return this._delQuery(token);\n          case protoResponseType.SUCCESS_ATOM:\n            response = mkAtom(response, opts);\n            if (Array.isArray(response)) {\n              response = cursors.makeIterable(response);\n            }\n            if (profile != null) {\n              response = {\n                profile: profile,\n                value: response\n              };\n            }\n            cb(null, response);\n            return this._delQuery(token);\n          case protoResponseType.SUCCESS_PARTIAL:\n            cursor = null;\n            ref1 = response.n;\n            for (k = 0, len1 = ref1.length; k < len1; k++) {\n              note = ref1[k];\n              switch (note) {\n                case protodef.Response.ResponseNote.SEQUENCE_FEED:\n                  if (cursor == null) {\n                    cursor = new cursors.Feed(this, token, opts, root);\n                  }\n                  break;\n                case protodef.Response.ResponseNote.UNIONED_FEED:\n                  if (cursor == null) {\n                    cursor = new cursors.UnionedFeed(this, token, opts, root);\n                  }\n                  break;\n                case protodef.Response.ResponseNote.ATOM_FEED:\n                  if (cursor == null) {\n                    cursor = new cursors.AtomFeed(this, token, opts, root);\n                  }\n                  break;\n                case protodef.Response.ResponseNote.ORDER_BY_LIMIT_FEED:\n                  if (cursor == null) {\n                    cursor = new cursors.OrderByLimitFeed(this, token, opts, root);\n                  }\n              }\n            }\n            if (cursor == null) {\n              cursor = new cursors.Cursor(this, token, opts, root);\n            }\n            this.outstandingCallbacks[token].cursor = cursor;\n            if (profile != null) {\n              return cb(null, {\n                profile: profile,\n                value: cursor._addResponse(response)\n              });\n            } else {\n              return cb(null, cursor._addResponse(response));\n            }\n            break;\n          case protoResponseType.SUCCESS_SEQUENCE:\n            cursor = new cursors.Cursor(this, token, opts, root);\n            this._delQuery(token);\n            if (profile != null) {\n              return cb(null, {\n                profile: profile,\n                value: cursor._addResponse(response)\n              });\n            } else {\n              return cb(null, cursor._addResponse(response));\n            }\n            break;\n          case protoResponseType.WAIT_COMPLETE:\n            this._delQuery(token);\n            return cb(null, null);\n          case protoResponseType.SERVER_INFO:\n            this._delQuery(token);\n            response = mkAtom(response, opts);\n            return cb(null, response);\n          default:\n            return cb(new err.ReqlDriverError(\"Unknown response type\"));\n        }\n      }\n    } else {\n\n    }\n  };\n\n  Connection.prototype.close = varar(0, 2, function(optsOrCallback, callback) {\n    var cb, key, noreplyWait, opts;\n    if (callback != null) {\n      opts = optsOrCallback;\n      if (Object.prototype.toString.call(opts) !== '[object Object]') {\n        throw new err.ReqlDriverError(\"First argument to two-argument `close` must be an object.\");\n      }\n      cb = callback;\n    } else if (Object.prototype.toString.call(optsOrCallback) === '[object Object]') {\n      opts = optsOrCallback;\n      cb = null;\n    } else if (typeof optsOrCallback === 'function') {\n      opts = {};\n      cb = optsOrCallback;\n    } else {\n      opts = optsOrCallback;\n      cb = null;\n    }\n    for (key in opts) {\n      if (!hasProp.call(opts, key)) continue;\n      if (key !== 'noreplyWait') {\n        throw new err.ReqlDriverError(\"First argument to two-argument `close` must be { noreplyWait: <bool> }.\");\n      }\n    }\n    if (this._closePromise != null) {\n      return this._closePromise.nodeify(cb);\n    }\n    this.closing = true;\n    noreplyWait = ((opts.noreplyWait == null) || opts.noreplyWait) && this.open;\n    return this._closePromise = new Promise((function(_this) {\n      return function(resolve, reject) {\n        var wrappedCb;\n        wrappedCb = function(err, result) {\n          _this.open = false;\n          _this.closing = false;\n          _this.cancel();\n          if (err != null) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        };\n        if (noreplyWait) {\n          return _this.noreplyWait(wrappedCb);\n        } else {\n          return wrappedCb();\n        }\n      };\n    })(this)).nodeify(cb);\n  });\n\n  Connection.prototype.noreplyWait = varar(0, 1, function(callback) {\n    var query, token;\n    if (!this.open) {\n      return new Promise(function(resolve, reject) {\n        return reject(new err.ReqlDriverError(\"Connection is closed.\"));\n      }).nodeify(callback);\n    }\n    token = this.nextToken++;\n    query = {};\n    query.type = protoQueryType.NOREPLY_WAIT;\n    query.token = token;\n    return new Promise((function(_this) {\n      return function(resolve, reject) {\n        var wrappedCb;\n        wrappedCb = function(err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        };\n        _this.outstandingCallbacks[token] = {\n          cb: wrappedCb,\n          root: null,\n          opts: null\n        };\n        return _this._sendQuery(query);\n      };\n    })(this)).nodeify(callback);\n  });\n\n  Connection.prototype.server = varar(0, 1, function(callback) {\n    var query, token;\n    if (!this.open) {\n      return new Promise(function(resolve, reject) {\n        return reject(new err.ReqlDriverError(\"Connection is closed.\"));\n      }).nodeify(callback);\n    }\n    token = this.nextToken++;\n    query = {};\n    query.type = protoQueryType.SERVER_INFO;\n    query.token = token;\n    return new Promise((function(_this) {\n      return function(resolve, reject) {\n        var wrappedCb;\n        wrappedCb = function(err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        };\n        _this.outstandingCallbacks[token] = {\n          cb: wrappedCb,\n          root: null,\n          opts: null\n        };\n        return _this._sendQuery(query);\n      };\n    })(this)).nodeify(callback);\n  });\n\n  Connection.prototype.cancel = ar(function() {\n    var key, ref, response, value;\n    response = {\n      t: protoResponseType.RUNTIME_ERROR,\n      r: [\"Connection is closed.\"],\n      b: []\n    };\n    ref = this.outstandingCallbacks;\n    for (key in ref) {\n      if (!hasProp.call(ref, key)) continue;\n      value = ref[key];\n      if (value.cursor != null) {\n        value.cursor._addResponse(response);\n      } else if (value.cb != null) {\n        value.cb(mkErr(util.errorClass(response.e), response, value.root));\n      }\n    }\n    return this.outstandingCallbacks = {};\n  });\n\n  Connection.prototype.reconnect = varar(0, 2, function(optsOrCallback, callback) {\n    var cb, opts;\n    if (callback != null) {\n      opts = optsOrCallback;\n      cb = callback;\n    } else if (typeof optsOrCallback === \"function\") {\n      opts = {};\n      cb = optsOrCallback;\n    } else {\n      if (optsOrCallback != null) {\n        opts = optsOrCallback;\n      } else {\n        opts = {};\n      }\n      cb = callback;\n    }\n    return new Promise((function(_this) {\n      return function(resolve, reject) {\n        var closeCb;\n        closeCb = function(err) {\n          return _this.constructor.call(_this, {\n            host: _this.host,\n            port: _this.port,\n            timeout: _this.timeout,\n            authKey: _this.authKey\n          }, function(err, conn) {\n            if (err != null) {\n              return reject(err);\n            } else {\n              return resolve(conn);\n            }\n          });\n        };\n        return _this.close(opts, closeCb);\n      };\n    })(this)).nodeify(cb);\n  });\n\n  Connection.prototype.use = ar(function(db) {\n    return this.db = db;\n  });\n\n  Connection.prototype.isOpen = function() {\n    return this.open && !this.closing;\n  };\n\n  Connection.prototype._start = function(term, cb, opts) {\n    var key, query, token, value;\n    if (!this.open) {\n      throw new err.ReqlDriverError(\"Connection is closed.\");\n    }\n    token = this.nextToken++;\n    query = {};\n    query.global_optargs = {};\n    query.type = protoQueryType.START;\n    query.query = term.build();\n    query.token = token;\n    for (key in opts) {\n      if (!hasProp.call(opts, key)) continue;\n      value = opts[key];\n      query.global_optargs[util.fromCamelCase(key)] = r.expr(value).build();\n    }\n    if ((opts.db != null) || (this.db != null)) {\n      query.global_optargs.db = r.db(opts.db || this.db).build();\n    }\n    if (opts.noreply != null) {\n      query.global_optargs['noreply'] = r.expr(!!opts.noreply).build();\n    }\n    if (opts.profile != null) {\n      query.global_optargs['profile'] = r.expr(!!opts.profile).build();\n    }\n    if ((opts.noreply == null) || !opts.noreply) {\n      this.outstandingCallbacks[token] = {\n        cb: cb,\n        root: term,\n        opts: opts\n      };\n    }\n    this._sendQuery(query);\n    if ((opts.noreply != null) && opts.noreply && typeof cb === 'function') {\n      return cb(null);\n    }\n  };\n\n  Connection.prototype._continueQuery = function(token) {\n    var query;\n    if (!this.open) {\n      throw new err.ReqlDriverError(\"Connection is closed.\");\n    }\n    query = {\n      type: protoQueryType.CONTINUE,\n      token: token\n    };\n    return this._sendQuery(query);\n  };\n\n  Connection.prototype._endQuery = function(token) {\n    var query;\n    if (!this.open) {\n      throw new err.ReqlDriverError(\"Connection is closed.\");\n    }\n    query = {\n      type: protoQueryType.STOP,\n      token: token\n    };\n    return this._sendQuery(query);\n  };\n\n  Connection.prototype._sendQuery = function(query) {\n    var data;\n    data = [query.type];\n    if (!(query.query === void 0)) {\n      data.push(query.query);\n      if ((query.global_optargs != null) && Object.keys(query.global_optargs).length > 0) {\n        data.push(query.global_optargs);\n      }\n    }\n    return this._writeQuery(query.token, JSON.stringify(data));\n  };\n\n  return Connection;\n\n})(events.EventEmitter);\n\npbkdf2_cache = {};\n\nTcpConnection = (function(superClass) {\n  extend(TcpConnection, superClass);\n\n  TcpConnection.isAvailable = function() {\n    return !process.browser;\n  };\n\n  function TcpConnection(host, callback) {\n    var timeout;\n    if (!TcpConnection.isAvailable()) {\n      throw new err.ReqlDriverError(\"TCP sockets are not available in this environment\");\n    }\n    TcpConnection.__super__.constructor.call(this, host, callback);\n    if (this.ssl) {\n      this.ssl.host = this.host;\n      this.ssl.port = this.port;\n      this.rawSocket = tls.connect(this.ssl);\n    } else {\n      this.rawSocket = net.connect(this.port, this.host);\n    }\n    this.rawSocket.setNoDelay();\n    this.rawSocket.setKeepAlive(true);\n    timeout = setTimeout(((function(_this) {\n      return function() {\n        _this.rawSocket.destroy();\n        return _this.emit('error', new err.ReqlTimeoutError(\"Could not connect to \" + _this.host + \":\" + _this.port + \", operation timed out.\"));\n      };\n    })(this)), this.timeout * 1000);\n    this.rawSocket.once('error', (function(_this) {\n      return function() {\n        return clearTimeout(timeout);\n      };\n    })(this));\n    this.rawSocket.once('connect', (function(_this) {\n      return function() {\n        var auth_i, auth_r, auth_salt, client_first_message_bare, compare_digest, handshake_callback, handshake_error, max, message, min, nullbyte, pbkdf2_hmac, protocol, r_string, server_first_message, server_signature, state, version, xor_bytes;\n        version = new Buffer(4);\n        version.writeUInt32LE(protoVersion, 0);\n        protocol = new Buffer(4);\n        protocol.writeUInt32LE(protoProtocol, 0);\n        r_string = new Buffer(crypto.randomBytes(18)).toString('base64');\n        _this.rawSocket.user = host[\"user\"];\n        _this.rawSocket.password = host[\"password\"];\n        if (_this.rawSocket.user === void 0) {\n          _this.rawSocket.user = \"admin\";\n        }\n        if (_this.rawSocket.password === void 0) {\n          _this.rawSocket.password = \"\";\n        }\n        client_first_message_bare = \"n=\" + _this.rawSocket.user + \",r=\" + r_string;\n        message = JSON.stringify({\n          protocol_version: protoVersionNumber,\n          authentication_method: \"SCRAM-SHA-256\",\n          authentication: \"n,,\" + client_first_message_bare\n        });\n        nullbyte = new Buffer('\\0', \"binary\");\n        _this.rawSocket.write(Buffer.concat([version, Buffer(message.toString()), nullbyte]));\n        state = 1;\n        min = 0;\n        max = 0;\n        server_first_message = \"\";\n        server_signature = \"\";\n        auth_r = \"\";\n        auth_salt = \"\";\n        auth_i = 0;\n        xor_bytes = function(a, b) {\n          var i, k, len, ref, res;\n          res = [];\n          len = Math.min(a.length, b.length);\n          for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            res.push(a[i] ^ b[i]);\n          }\n          return new Buffer(res);\n        };\n        pbkdf2_hmac = function(password, salt, iterations) {\n          var c, cache_string, k, mac, ref, t, u;\n          cache_string = password.toString(\"base64\") + \",\" + salt.toString(\"base64\") + \",\" + iterations.toString();\n          if (pbkdf2_cache[cache_string]) {\n            return pbkdf2_cache[cache_string];\n          }\n          mac = crypto.createHmac(\"sha256\", password);\n          mac.update(salt);\n          mac.update(\"\\x00\\x00\\x00\\x01\");\n          u = mac.digest();\n          t = u;\n          for (c = k = 0, ref = iterations - 1; 0 <= ref ? k < ref : k > ref; c = 0 <= ref ? ++k : --k) {\n            mac = crypto.createHmac(\"sha256\", password);\n            mac.update(t);\n            t = mac.digest();\n            u = xor_bytes(u, t);\n          }\n          pbkdf2_cache[cache_string] = u;\n          return u;\n        };\n        compare_digest = function(a, b) {\n          var i, k, left, len, ref, result, right;\n          left = void 0;\n          right = b;\n          result = void 0;\n          if (a.length === b.length) {\n            left = a;\n            result = 0;\n          }\n          if (a.length !== b.length) {\n            left = b;\n            result = 1;\n          }\n          len = Math.min(left.length, right.length);\n          for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            result |= left[i] ^ right[i];\n          }\n          return result === 0;\n        };\n        handshake_error = function(code, message) {\n          if ((10 <= code && code <= 20)) {\n            return _this.emit('error', new err.ReqlAuthError(message));\n          } else {\n            return _this.emit('error', new err.ReqlDriverError(message));\n          }\n        };\n        handshake_callback = function(buf) {\n          var auth_message, authentication, b, client_final_message_without_proof, client_key, client_proof, client_signature, error1, first_equals, i, item, j, json_error, k, l, len1, len2, ref, ref1, salted_password, server_key, server_reply, status_buf, status_str, stored_key, v;\n          _this.buffer = Buffer.concat([_this.buffer, buf]);\n          j = 0;\n          ref = _this.buffer;\n          for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {\n            b = ref[i];\n            if (b === 0) {\n              status_buf = _this.buffer.slice(j, i);\n              j = i + 1;\n              status_str = status_buf.toString();\n              try {\n                server_reply = JSON.parse(status_str);\n              } catch (error1) {\n                json_error = error1;\n                throw new err.ReqlDriverError(status_str);\n              }\n              if (state === 1) {\n                if (!server_reply.success) {\n                  handshake_error(server_reply.error_code, server_reply.error);\n                  return;\n                }\n                min = server_reply.min_protocol_version;\n                max = server_reply.max_protocol_version;\n                if (min > protoVersionNumber || max < protoVersionNumber) {\n                  throw new err.ReqlDriverError(\"Unsupported protocol version \" + protoVersionNumber + \", expected between \" + min + \" and \" + max + \".\");\n                }\n                state = 2;\n              } else if (state === 2) {\n                if (!server_reply.success) {\n                  handshake_error(server_reply.error_code, server_reply.error);\n                  return;\n                }\n                authentication = {};\n                server_first_message = server_reply.authentication;\n                ref1 = server_first_message.split(\",\");\n                for (l = 0, len2 = ref1.length; l < len2; l++) {\n                  item = ref1[l];\n                  i = item.indexOf(\"=\");\n                  authentication[item.slice(0, i)] = item.slice(i + 1);\n                }\n                auth_r = authentication.r;\n                auth_salt = new Buffer(authentication.s, 'base64');\n                auth_i = parseInt(authentication.i);\n                if (!(auth_r.substr(0, r_string.length) === r_string)) {\n                  throw new err.ReqlAuthError(\"Invalid nonce from server\");\n                }\n                client_final_message_without_proof = \"c=biws,r=\" + auth_r;\n                salted_password = pbkdf2_hmac(_this.rawSocket.password, auth_salt, auth_i);\n                client_key = crypto.createHmac(\"sha256\", salted_password).update(\"Client Key\").digest();\n                stored_key = crypto.createHash(\"sha256\").update(client_key).digest();\n                auth_message = client_first_message_bare + \",\" + server_first_message + \",\" + client_final_message_without_proof;\n                client_signature = crypto.createHmac(\"sha256\", stored_key).update(auth_message).digest();\n                client_proof = xor_bytes(client_key, client_signature);\n                server_key = crypto.createHmac(\"sha256\", salted_password).update(\"Server Key\").digest();\n                server_signature = crypto.createHmac(\"sha256\", server_key).update(auth_message).digest();\n                state = 3;\n                message = JSON.stringify({\n                  authentication: client_final_message_without_proof + \",p=\" + client_proof.toString(\"base64\")\n                });\n                nullbyte = new Buffer('\\0', \"binary\");\n                _this.rawSocket.write(Buffer.concat([Buffer(message.toString()), nullbyte]));\n              } else if (state === 3) {\n                if (!server_reply.success) {\n                  handshake_error(server_reply.error_code, server_reply.error);\n                  return;\n                }\n                first_equals = server_reply.authentication.indexOf('=');\n                v = server_reply.authentication.slice(first_equals + 1);\n                if (!compare_digest(v, server_signature.toString(\"base64\"))) {\n                  throw new err.ReqlAuthError(\"Invalid server signature\");\n                }\n                state = 4;\n                _this.rawSocket.removeListener('data', handshake_callback);\n                _this.rawSocket.on('data', function(buf) {\n                  return _this._data(buf);\n                });\n                clearTimeout(timeout);\n                _this.emit('connect');\n              } else {\n                throw new err.ReqlDriverError(\"Unexpected handshake state\");\n              }\n            }\n          }\n          return _this.buffer = _this.buffer.slice(j + 1);\n        };\n        return _this.rawSocket.on('data', handshake_callback);\n      };\n    })(this));\n    this.rawSocket.on('error', (function(_this) {\n      return function(err) {\n        return _this.emit('error', err);\n      };\n    })(this));\n    this.rawSocket.on('close', (function(_this) {\n      return function() {\n        if (_this.isOpen()) {\n          _this.close({\n            noreplyWait: false\n          });\n        }\n        return _this.emit('close');\n      };\n    })(this));\n    this.rawSocket.on('timeout', (function(_this) {\n      return function() {\n        _this.open = false;\n        return _this.emit('timeout');\n      };\n    })(this));\n  }\n\n  TcpConnection.prototype.clientPort = function() {\n    return this.rawSocket.localPort;\n  };\n\n  TcpConnection.prototype.clientAddress = function() {\n    return this.rawSocket.localAddress;\n  };\n\n  TcpConnection.prototype.close = varar(0, 2, function(optsOrCallback, callback) {\n    var cb, opts;\n    if (callback != null) {\n      opts = optsOrCallback;\n      cb = callback;\n    } else if (Object.prototype.toString.call(optsOrCallback) === '[object Object]') {\n      opts = optsOrCallback;\n      cb = null;\n    } else if (typeof optsOrCallback === \"function\") {\n      opts = {};\n      cb = optsOrCallback;\n    } else {\n      opts = {};\n    }\n    return new Promise((function(_this) {\n      return function(resolve, reject) {\n        var wrappedCb;\n        wrappedCb = function(error, result) {\n          var cleanupSocket, closeCb, ref;\n          closeCb = function() {\n            if (error != null) {\n              return reject(error);\n            } else {\n              return resolve(result);\n            }\n          };\n          cleanupSocket = function() {\n            var ref;\n            closeCb();\n            if ((ref = _this.rawSocket) != null) {\n              ref.removeAllListeners();\n            }\n            _this.rawSocket = null;\n            return _this.emit(\"close\");\n          };\n          if (_this.rawSocket != null) {\n            if (_this.rawSocket.readyState === 'closed') {\n              return cleanupSocket();\n            } else {\n              if ((ref = _this.rawSocket) != null) {\n                ref.once(\"close\", cleanupSocket);\n              }\n              return _this.rawSocket.end();\n            }\n          } else {\n            return process.nextTick(closeCb);\n          }\n        };\n        return TcpConnection.__super__.close.call(_this, opts, wrappedCb);\n      };\n    })(this)).nodeify(cb);\n  });\n\n  TcpConnection.prototype.cancel = function() {\n    this.rawSocket.destroy();\n    return TcpConnection.__super__.cancel.call(this);\n  };\n\n  TcpConnection.prototype._writeQuery = function(token, data) {\n    var tokenBuf;\n    tokenBuf = new Buffer(8);\n    tokenBuf.writeUInt32LE(token & 0xFFFFFFFF, 0);\n    tokenBuf.writeUInt32LE(Math.floor(token / 0xFFFFFFFF), 4);\n    this.rawSocket.write(tokenBuf);\n    return this.write(new Buffer(data));\n  };\n\n  TcpConnection.prototype.write = function(chunk) {\n    var lengthBuffer;\n    lengthBuffer = new Buffer(4);\n    lengthBuffer.writeUInt32LE(chunk.length, 0);\n    this.rawSocket.write(lengthBuffer);\n    return this.rawSocket.write(chunk);\n  };\n\n  return TcpConnection;\n\n})(Connection);\n\nHttpConnection = (function(superClass) {\n  extend(HttpConnection, superClass);\n\n  HttpConnection.prototype.DEFAULT_PROTOCOL = 'http';\n\n  HttpConnection.isAvailable = function() {\n    return typeof XMLHttpRequest !== \"undefined\";\n  };\n\n  function HttpConnection(host, callback) {\n    var protocol, url, xhr;\n    if (!HttpConnection.isAvailable()) {\n      throw new err.ReqlDriverError(\"XMLHttpRequest is not available in this environment\");\n    }\n    HttpConnection.__super__.constructor.call(this, host, callback);\n    protocol = host.protocol === 'https' ? 'https' : this.DEFAULT_PROTOCOL;\n    url = protocol + \"://\" + this.host + \":\" + this.port + host.pathname + \"ajax/reql/\";\n    xhr = new XMLHttpRequest;\n    xhr.open(\"POST\", url + (\"open-new-connection?cacheBuster=\" + (Math.random())), true);\n    xhr.responseType = \"text\";\n    xhr.onreadystatechange = (function(_this) {\n      return function(e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            _this._url = url;\n            _this._connId = xhr.response;\n            return _this.emit('connect');\n          } else {\n            return _this.emit('error', new err.ReqlDriverError(\"XHR error, http status \" + xhr.status + \".\"));\n          }\n        }\n      };\n    })(this);\n    xhr.send();\n    this.xhr = xhr;\n  }\n\n  HttpConnection.prototype.cancel = function() {\n    var xhr;\n    if (this._connId != null) {\n      this.xhr.abort();\n      xhr = new XMLHttpRequest;\n      xhr.open(\"POST\", this._url + \"close-connection?conn_id=\" + this._connId, true);\n      xhr.responseType = \"arraybuffer\";\n      xhr.send();\n      this._url = null;\n      this._connId = null;\n      return HttpConnection.__super__.cancel.call(this);\n    }\n  };\n\n  HttpConnection.prototype.close = varar(0, 2, function(optsOrCallback, callback) {\n    var cb, opts;\n    if (callback != null) {\n      opts = optsOrCallback;\n      cb = callback;\n    } else if (Object.prototype.toString.call(optsOrCallback) === '[object Object]') {\n      opts = optsOrCallback;\n      cb = null;\n    } else {\n      opts = {};\n      cb = optsOrCallback;\n    }\n    if (!((cb == null) || typeof cb === 'function')) {\n      throw new err.ReqlDriverError(\"Final argument to `close` must be a callback function or object.\");\n    }\n    return HttpConnection.__super__.close.call(this, opts, cb);\n  });\n\n  HttpConnection.prototype._writeQuery = function(token, data) {\n    var buf;\n    buf = new Buffer(encodeURI(data).split(/%..|./).length - 1 + 8);\n    buf.writeUInt32LE(token & 0xFFFFFFFF, 0);\n    buf.writeUInt32LE(Math.floor(token / 0xFFFFFFFF), 4);\n    buf.write(data, 8);\n    return this.write(buf, token);\n  };\n\n  HttpConnection.prototype.write = function(chunk, token) {\n    var i, view, xhr;\n    xhr = new XMLHttpRequest;\n    xhr.open(\"POST\", this._url + \"?conn_id=\" + this._connId, true);\n    xhr.responseType = \"arraybuffer\";\n    xhr.onreadystatechange = (function(_this) {\n      return function(e) {\n        var b, buf;\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          buf = new Buffer((function() {\n            var k, len1, ref, results;\n            ref = new Uint8Array(xhr.response);\n            results = [];\n            for (k = 0, len1 = ref.length; k < len1; k++) {\n              b = ref[k];\n              results.push(b);\n            }\n            return results;\n          })());\n          return _this._data(buf);\n        }\n      };\n    })(this);\n    xhr.onerror = (function(_this) {\n      return function(e) {\n        return _this.outstandingCallbacks[token].cb(new Error(\"This HTTP connection is not open\"));\n      };\n    })(this);\n    view = new Uint8Array(chunk.length);\n    i = 0;\n    while (i < chunk.length) {\n      view[i] = chunk[i];\n      i++;\n    }\n    xhr.send(view);\n    return this.xhr = xhr;\n  };\n\n  return HttpConnection;\n\n})(Connection);\n\nmodule.exports.isConnection = function(connection) {\n  return connection instanceof Connection;\n};\n\nmodule.exports.connect = varar(0, 2, function(hostOrCallback, callback) {\n  var host;\n  if (typeof hostOrCallback === 'function') {\n    host = {};\n    callback = hostOrCallback;\n  } else {\n    host = hostOrCallback || {};\n  }\n  return new Promise(function(resolve, reject) {\n    var create_connection, wrappedCb;\n    if ((host.authKey != null) && ((host.password != null) || (host.user != null) || (host.username != null))) {\n      throw new err.ReqlDriverError(\"Cannot use both authKey and password\");\n    }\n    if (host.user && host.username) {\n      throw new err.ReqlDriverError(\"Cannot use both user and username\");\n    } else if (host.authKey) {\n      host.user = \"admin\";\n      host.password = host.authKey;\n    } else {\n      if (host.username != null) {\n        host.user = host.username;\n      }\n    }\n    create_connection = (function(_this) {\n      return function(host, callback) {\n        if (TcpConnection.isAvailable()) {\n          return new TcpConnection(host, callback);\n        } else if (HttpConnection.isAvailable()) {\n          return new HttpConnection(host, callback);\n        } else {\n          throw new err.ReqlDriverError(\"Neither TCP nor HTTP avaiable in this environment\");\n        }\n      };\n    })(this);\n    wrappedCb = function(err, result) {\n      if (err) {\n        return reject(err);\n      } else {\n        return resolve(result);\n      }\n    };\n    return create_connection(host, wrappedCb);\n  }).nodeify(callback);\n});\n\nmodule.exports.Connection = Connection;\n\nmodule.exports.HttpConnection = HttpConnection;\n\nmodule.exports.TcpConnection = TcpConnection;\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/util.js":"// Generated by CoffeeScript 1.10.0\nvar convertPseudotype, err, errorClass, mkAtom, mkErr, mkSeq, plural, protoErrorType, protodef, recursivelyConvertPseudotype,\n  slice = [].slice;\n\nerr = require('./errors');\n\nprotodef = require('./proto-def');\n\nprotoErrorType = protodef.Response.ErrorType;\n\nplural = function(number) {\n  if (number === 1) {\n    return \"\";\n  } else {\n    return \"s\";\n  }\n};\n\nmodule.exports.ar = function(fun) {\n  return function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (args.length !== fun.length) {\n      throw new err.ReqlDriverCompileError(\"Expected \" + fun.length + \" argument\" + (plural(fun.length)) + \" but found \" + args.length + \".\");\n    }\n    return fun.apply(this, args);\n  };\n};\n\nmodule.exports.varar = function(min, max, fun) {\n  return function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (((min != null) && args.length < min) || ((max != null) && args.length > max)) {\n      if ((min != null) && (max == null)) {\n        throw new err.ReqlDriverCompileError(\"Expected \" + min + \" or more arguments but found \" + args.length + \".\");\n      }\n      if ((max != null) && (min == null)) {\n        throw new err.ReqlDriverCompileError(\"Expected \" + max + \" or fewer arguments but found \" + args.length + \".\");\n      }\n      throw new err.ReqlDriverCompileError(\"Expected between \" + min + \" and \" + max + \" arguments but found \" + args.length + \".\");\n    }\n    return fun.apply(this, args);\n  };\n};\n\nmodule.exports.aropt = function(fun) {\n  return function() {\n    var args, expectedPosArgs, numPosArgs, perhapsOptDict;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    expectedPosArgs = fun.length - 1;\n    perhapsOptDict = args[expectedPosArgs];\n    if ((perhapsOptDict != null) && (Object.prototype.toString.call(perhapsOptDict) !== '[object Object]')) {\n      perhapsOptDict = null;\n    }\n    numPosArgs = args.length - (perhapsOptDict != null ? 1 : 0);\n    if (expectedPosArgs !== numPosArgs) {\n      if (expectedPosArgs !== 1) {\n        throw new err.ReqlDriverCompileError(\"Expected \" + expectedPosArgs + \" arguments (not including options) but found \" + numPosArgs + \".\");\n      } else {\n        throw new err.ReqlDriverCompileError(\"Expected \" + expectedPosArgs + \" argument (not including options) but found \" + numPosArgs + \".\");\n      }\n    }\n    return fun.apply(this, args);\n  };\n};\n\nmodule.exports.toArrayBuffer = function(node_buffer) {\n  var arr, i, j, len, value;\n  arr = new Uint8Array(new ArrayBuffer(node_buffer.length));\n  for (i = j = 0, len = node_buffer.length; j < len; i = ++j) {\n    value = node_buffer[i];\n    arr[i] = value;\n  }\n  return arr.buffer;\n};\n\nmodule.exports.fromCamelCase = function(token) {\n  return token.replace(/[A-Z]/g, (function(_this) {\n    return function(match) {\n      return \"_\" + match.toLowerCase();\n    };\n  })(this));\n};\n\nmodule.exports.toCamelCase = function(token) {\n  return token.replace(/_[a-z]/g, (function(_this) {\n    return function(match) {\n      return match[1].toUpperCase();\n    };\n  })(this));\n};\n\nconvertPseudotype = function(obj, opts) {\n  var i, j, len, ref, results;\n  switch (obj['$reql_type$']) {\n    case 'TIME':\n      switch (opts.timeFormat) {\n        case 'native':\n        case void 0:\n          if (obj['epoch_time'] == null) {\n            throw new err.ReqlDriverError(\"pseudo-type TIME \" + obj + \" object missing expected field 'epoch_time'.\");\n          }\n          return new Date(obj['epoch_time'] * 1000);\n        case 'raw':\n          return obj;\n        default:\n          throw new err.ReqlDriverError(\"Unknown timeFormat run option \" + opts.timeFormat + \".\");\n      }\n      break;\n    case 'GROUPED_DATA':\n      switch (opts.groupFormat) {\n        case 'native':\n        case void 0:\n          ref = obj['data'];\n          results = [];\n          for (j = 0, len = ref.length; j < len; j++) {\n            i = ref[j];\n            results.push({\n              group: i[0],\n              reduction: i[1]\n            });\n          }\n          return results;\n          break;\n        case 'raw':\n          return obj;\n        default:\n          throw new err.ReqlDriverError(\"Unknown groupFormat run option \" + opts.groupFormat + \".\");\n      }\n      break;\n    case 'BINARY':\n      switch (opts.binaryFormat) {\n        case 'native':\n        case void 0:\n          if (obj['data'] == null) {\n            throw new err.ReqlDriverError(\"pseudo-type BINARY object missing expected field 'data'.\");\n          }\n          return new Buffer(obj['data'], 'base64');\n        case 'raw':\n          return obj;\n        default:\n          throw new err.ReqlDriverError(\"Unknown binaryFormat run option \" + opts.binaryFormat + \".\");\n      }\n      break;\n    default:\n      return obj;\n  }\n};\n\nrecursivelyConvertPseudotype = function(obj, opts) {\n  var i, j, key, len, value;\n  if (Array.isArray(obj)) {\n    for (i = j = 0, len = obj.length; j < len; i = ++j) {\n      value = obj[i];\n      obj[i] = recursivelyConvertPseudotype(value, opts);\n    }\n  } else if (obj && typeof obj === 'object') {\n    for (key in obj) {\n      value = obj[key];\n      obj[key] = recursivelyConvertPseudotype(value, opts);\n    }\n    obj = convertPseudotype(obj, opts);\n  }\n  return obj;\n};\n\nmkAtom = function(response, opts) {\n  return recursivelyConvertPseudotype(response.r[0], opts);\n};\n\nmkSeq = function(response, opts) {\n  return recursivelyConvertPseudotype(response.r, opts);\n};\n\nmkErr = function(ErrClass, response, root) {\n  return new ErrClass(mkAtom(response), root, response.b);\n};\n\nerrorClass = (function(_this) {\n  return function(errorType) {\n    switch (errorType) {\n      case protoErrorType.QUERY_LOGIC:\n        return err.ReqlQueryLogicError;\n      case protoErrorType.NON_EXISTENCE:\n        return err.ReqlNonExistenceError;\n      case protoErrorType.RESOURCE_LIMIT:\n        return err.ReqlResourceLimitError;\n      case protoErrorType.USER:\n        return err.ReqlUserError;\n      case protoErrorType.INTERNAL:\n        return err.ReqlInternalError;\n      case protoErrorType.OP_FAILED:\n        return err.ReqlOpFailedError;\n      case protoErrorType.OP_INDETERMINATE:\n        return err.ReqlOpIndeterminateError;\n      case protoErrorType.PERMISSION_ERROR:\n        return err.ReqlPermissionError;\n      default:\n        return err.ReqlRuntimeError;\n    }\n  };\n})(this);\n\nmodule.exports.recursivelyConvertPseudotype = recursivelyConvertPseudotype;\n\nmodule.exports.mkAtom = mkAtom;\n\nmodule.exports.mkSeq = mkSeq;\n\nmodule.exports.mkErr = mkErr;\n\nmodule.exports.errorClass = errorClass;\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/errors.js":"// Generated by CoffeeScript 1.10.0\nvar ReqlAuthError, ReqlAvailabilityError, ReqlCompileError, ReqlDriverCompileError, ReqlDriverError, ReqlError, ReqlInternalError, ReqlNonExistenceError, ReqlOpFailedError, ReqlOpIndeterminateError, ReqlPermissionError, ReqlQueryLogicError, ReqlQueryPrinter, ReqlResourceLimitError, ReqlRuntimeError, ReqlServerCompileError, ReqlTimeoutError, ReqlUserError,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nReqlError = (function(superClass) {\n  extend(ReqlError, superClass);\n\n  function ReqlError(msg, term, frames) {\n    this.name = this.constructor.name;\n    this.msg = msg;\n    this.frames = frames != null ? frames.slice(0) : void 0;\n    if (term != null) {\n      if (msg[msg.length - 1] === '.') {\n        this.message = (msg.slice(0, msg.length - 1)) + \" in:\\n\" + (ReqlQueryPrinter.prototype.printQuery(term)) + \"\\n\" + (ReqlQueryPrinter.prototype.printCarrots(term, frames));\n      } else {\n        this.message = msg + \" in:\\n\" + (ReqlQueryPrinter.prototype.printQuery(term)) + \"\\n\" + (ReqlQueryPrinter.prototype.printCarrots(term, frames));\n      }\n    } else {\n      this.message = \"\" + msg;\n    }\n    if (Error.captureStackTrace != null) {\n      Error.captureStackTrace(this, this);\n    }\n  }\n\n  return ReqlError;\n\n})(Error);\n\nReqlCompileError = (function(superClass) {\n  extend(ReqlCompileError, superClass);\n\n  function ReqlCompileError() {\n    return ReqlCompileError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlCompileError;\n\n})(ReqlError);\n\nReqlDriverCompileError = (function(superClass) {\n  extend(ReqlDriverCompileError, superClass);\n\n  function ReqlDriverCompileError() {\n    return ReqlDriverCompileError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlDriverCompileError;\n\n})(ReqlCompileError);\n\nReqlServerCompileError = (function(superClass) {\n  extend(ReqlServerCompileError, superClass);\n\n  function ReqlServerCompileError() {\n    return ReqlServerCompileError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlServerCompileError;\n\n})(ReqlCompileError);\n\nReqlDriverError = (function(superClass) {\n  extend(ReqlDriverError, superClass);\n\n  function ReqlDriverError() {\n    return ReqlDriverError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlDriverError;\n\n})(ReqlError);\n\nReqlAuthError = (function(superClass) {\n  extend(ReqlAuthError, superClass);\n\n  function ReqlAuthError() {\n    return ReqlAuthError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlAuthError;\n\n})(ReqlDriverError);\n\nReqlRuntimeError = (function(superClass) {\n  extend(ReqlRuntimeError, superClass);\n\n  function ReqlRuntimeError() {\n    return ReqlRuntimeError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlRuntimeError;\n\n})(ReqlError);\n\nReqlQueryLogicError = (function(superClass) {\n  extend(ReqlQueryLogicError, superClass);\n\n  function ReqlQueryLogicError() {\n    return ReqlQueryLogicError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlQueryLogicError;\n\n})(ReqlRuntimeError);\n\nReqlNonExistenceError = (function(superClass) {\n  extend(ReqlNonExistenceError, superClass);\n\n  function ReqlNonExistenceError() {\n    return ReqlNonExistenceError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlNonExistenceError;\n\n})(ReqlQueryLogicError);\n\nReqlResourceLimitError = (function(superClass) {\n  extend(ReqlResourceLimitError, superClass);\n\n  function ReqlResourceLimitError() {\n    return ReqlResourceLimitError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlResourceLimitError;\n\n})(ReqlRuntimeError);\n\nReqlUserError = (function(superClass) {\n  extend(ReqlUserError, superClass);\n\n  function ReqlUserError() {\n    return ReqlUserError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlUserError;\n\n})(ReqlRuntimeError);\n\nReqlInternalError = (function(superClass) {\n  extend(ReqlInternalError, superClass);\n\n  function ReqlInternalError() {\n    return ReqlInternalError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlInternalError;\n\n})(ReqlRuntimeError);\n\nReqlTimeoutError = (function(superClass) {\n  extend(ReqlTimeoutError, superClass);\n\n  function ReqlTimeoutError() {\n    return ReqlTimeoutError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlTimeoutError;\n\n})(ReqlError);\n\nReqlAvailabilityError = (function(superClass) {\n  extend(ReqlAvailabilityError, superClass);\n\n  function ReqlAvailabilityError() {\n    return ReqlAvailabilityError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlAvailabilityError;\n\n})(ReqlRuntimeError);\n\nReqlOpFailedError = (function(superClass) {\n  extend(ReqlOpFailedError, superClass);\n\n  function ReqlOpFailedError() {\n    return ReqlOpFailedError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlOpFailedError;\n\n})(ReqlAvailabilityError);\n\nReqlOpIndeterminateError = (function(superClass) {\n  extend(ReqlOpIndeterminateError, superClass);\n\n  function ReqlOpIndeterminateError() {\n    return ReqlOpIndeterminateError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlOpIndeterminateError;\n\n})(ReqlAvailabilityError);\n\nReqlPermissionError = (function(superClass) {\n  extend(ReqlPermissionError, superClass);\n\n  function ReqlPermissionError() {\n    return ReqlPermissionError.__super__.constructor.apply(this, arguments);\n  }\n\n  return ReqlPermissionError;\n\n})(ReqlRuntimeError);\n\nReqlQueryPrinter = (function() {\n  var carrotMarker, carrotify, composeCarrots, composeTerm, joinTree;\n\n  function ReqlQueryPrinter() {}\n\n  ReqlQueryPrinter.prototype.printQuery = function(term) {\n    var tree;\n    tree = composeTerm(term);\n    return joinTree(tree);\n  };\n\n  composeTerm = function(term) {\n    var arg, args, key, optargs, ref;\n    args = (function() {\n      var j, len, ref, results;\n      ref = term.args;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        arg = ref[j];\n        results.push(composeTerm(arg));\n      }\n      return results;\n    })();\n    optargs = {};\n    ref = term.optargs;\n    for (key in ref) {\n      if (!hasProp.call(ref, key)) continue;\n      arg = ref[key];\n      optargs[key] = composeTerm(arg);\n    }\n    return term.compose(args, optargs);\n  };\n\n  ReqlQueryPrinter.prototype.printCarrots = function(term, frames) {\n    var tree;\n    if (frames.length === 0) {\n      tree = [carrotify(composeTerm(term))];\n    } else {\n      tree = composeCarrots(term, frames);\n    }\n    return (joinTree(tree)).replace(/[^\\^]/g, ' ');\n  };\n\n  composeCarrots = function(term, frames) {\n    var arg, args, frame, i, key, optargs, ref;\n    frame = frames.shift();\n    args = (function() {\n      var j, len, ref, results;\n      ref = term.args;\n      results = [];\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        arg = ref[i];\n        if (frame === i) {\n          results.push(composeCarrots(arg, frames));\n        } else {\n          results.push(composeTerm(arg));\n        }\n      }\n      return results;\n    })();\n    optargs = {};\n    ref = term.optargs;\n    for (key in ref) {\n      if (!hasProp.call(ref, key)) continue;\n      arg = ref[key];\n      if (frame === key) {\n        optargs[key] = composeCarrots(arg, frames);\n      } else {\n        optargs[key] = composeTerm(arg);\n      }\n    }\n    if (frame != null) {\n      return term.compose(args, optargs);\n    } else {\n      return carrotify(term.compose(args, optargs));\n    }\n  };\n\n  carrotMarker = {};\n\n  carrotify = function(tree) {\n    return [carrotMarker, tree];\n  };\n\n  joinTree = function(tree) {\n    var j, len, str, term;\n    str = '';\n    for (j = 0, len = tree.length; j < len; j++) {\n      term = tree[j];\n      if (Array.isArray(term)) {\n        if (term.length === 2 && term[0] === carrotMarker) {\n          str += (joinTree(term[1])).replace(/./g, '^');\n        } else {\n          str += joinTree(term);\n        }\n      } else {\n        str += term;\n      }\n    }\n    return str;\n  };\n\n  return ReqlQueryPrinter;\n\n})();\n\nmodule.exports = {\n  ReqlError: ReqlError,\n  ReqlCompileError: ReqlCompileError,\n  RqlCompileError: ReqlCompileError,\n  ReqlServerCompileError: ReqlServerCompileError,\n  ReqlDriverCompileError: ReqlDriverCompileError,\n  RqlClientError: ReqlDriverError,\n  ReqlRuntimeError: ReqlRuntimeError,\n  RqlRuntimeError: ReqlRuntimeError,\n  RqlServerError: ReqlRuntimeError,\n  ReqlQueryLogicError: ReqlQueryLogicError,\n  ReqlNonExistenceError: ReqlNonExistenceError,\n  ReqlResourceLimitError: ReqlResourceLimitError,\n  ReqlUserError: ReqlUserError,\n  ReqlInternalError: ReqlInternalError,\n  ReqlTimeoutError: ReqlTimeoutError,\n  ReqlAvailabilityError: ReqlAvailabilityError,\n  ReqlOpFailedError: ReqlOpFailedError,\n  ReqlOpIndeterminateError: ReqlOpIndeterminateError,\n  ReqlPermissionError: ReqlPermissionError,\n  ReqlDriverError: ReqlDriverError,\n  RqlDriverError: ReqlDriverError,\n  ReqlAuthError: ReqlAuthError,\n  printQuery: ReqlQueryPrinter.prototype.printQuery\n};\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/proto-def.js":"// DO NOT EDIT\n// Autogenerated by convert_protofile\n\nmodule.exports = {\n\tVersionDummy: {\n\t\tVersion: {\n\t\t\tV0_1: 1063369270,\n\t\t\tV0_2: 1915781601,\n\t\t\tV0_3: 1601562686,\n\t\t\tV0_4: 1074539808,\n\t\t\tV1_0: 885177795\n\t\t},\n\t\t\n\t\tProtocol: {\n\t\t\tPROTOBUF: 656407617,\n\t\t\tJSON: 2120839367\n\t\t}\n\t},\n\t\n\tQuery: {\n\t\tQueryType: {\n\t\t\tSTART: 1,\n\t\t\tCONTINUE: 2,\n\t\t\tSTOP: 3,\n\t\t\tNOREPLY_WAIT: 4,\n\t\t\tSERVER_INFO: 5\n\t\t},\n\t\t\n\t\tAssocPair: {}\n\t},\n\t\n\tFrame: {\n\t\tFrameType: {\n\t\t\tPOS: 1,\n\t\t\tOPT: 2\n\t\t}\n\t},\n\t\n\tBacktrace: {},\n\t\n\tResponse: {\n\t\tResponseType: {\n\t\t\tSUCCESS_ATOM: 1,\n\t\t\tSUCCESS_SEQUENCE: 2,\n\t\t\tSUCCESS_PARTIAL: 3,\n\t\t\tWAIT_COMPLETE: 4,\n\t\t\tSERVER_INFO: 5,\n\t\t\tCLIENT_ERROR: 16,\n\t\t\tCOMPILE_ERROR: 17,\n\t\t\tRUNTIME_ERROR: 18\n\t\t},\n\t\t\n\t\tErrorType: {\n\t\t\tINTERNAL: 1000000,\n\t\t\tRESOURCE_LIMIT: 2000000,\n\t\t\tQUERY_LOGIC: 3000000,\n\t\t\tNON_EXISTENCE: 3100000,\n\t\t\tOP_FAILED: 4100000,\n\t\t\tOP_INDETERMINATE: 4200000,\n\t\t\tUSER: 5000000,\n\t\t\tPERMISSION_ERROR: 6000000\n\t\t},\n\t\t\n\t\tResponseNote: {\n\t\t\tSEQUENCE_FEED: 1,\n\t\t\tATOM_FEED: 2,\n\t\t\tORDER_BY_LIMIT_FEED: 3,\n\t\t\tUNIONED_FEED: 4,\n\t\t\tINCLUDES_STATES: 5\n\t\t}\n\t},\n\t\n\tDatum: {\n\t\tDatumType: {\n\t\t\tR_NULL: 1,\n\t\t\tR_BOOL: 2,\n\t\t\tR_NUM: 3,\n\t\t\tR_STR: 4,\n\t\t\tR_ARRAY: 5,\n\t\t\tR_OBJECT: 6,\n\t\t\tR_JSON: 7\n\t\t},\n\t\t\n\t\tAssocPair: {}\n\t},\n\t\n\tTerm: {\n\t\tTermType: {\n\t\t\tDATUM: 1,\n\t\t\tMAKE_ARRAY: 2,\n\t\t\tMAKE_OBJ: 3,\n\t\t\tVAR: 10,\n\t\t\tJAVASCRIPT: 11,\n\t\t\tUUID: 169,\n\t\t\tHTTP: 153,\n\t\t\tERROR: 12,\n\t\t\tIMPLICIT_VAR: 13,\n\t\t\tDB: 14,\n\t\t\tTABLE: 15,\n\t\t\tGET: 16,\n\t\t\tGET_ALL: 78,\n\t\t\tEQ: 17,\n\t\t\tNE: 18,\n\t\t\tLT: 19,\n\t\t\tLE: 20,\n\t\t\tGT: 21,\n\t\t\tGE: 22,\n\t\t\tNOT: 23,\n\t\t\tADD: 24,\n\t\t\tSUB: 25,\n\t\t\tMUL: 26,\n\t\t\tDIV: 27,\n\t\t\tMOD: 28,\n\t\t\tFLOOR: 183,\n\t\t\tCEIL: 184,\n\t\t\tROUND: 185,\n\t\t\tAPPEND: 29,\n\t\t\tPREPEND: 80,\n\t\t\tDIFFERENCE: 95,\n\t\t\tSET_INSERT: 88,\n\t\t\tSET_INTERSECTION: 89,\n\t\t\tSET_UNION: 90,\n\t\t\tSET_DIFFERENCE: 91,\n\t\t\tSLICE: 30,\n\t\t\tSKIP: 70,\n\t\t\tLIMIT: 71,\n\t\t\tOFFSETS_OF: 87,\n\t\t\tCONTAINS: 93,\n\t\t\tGET_FIELD: 31,\n\t\t\tKEYS: 94,\n\t\t\tVALUES: 186,\n\t\t\tOBJECT: 143,\n\t\t\tHAS_FIELDS: 32,\n\t\t\tWITH_FIELDS: 96,\n\t\t\tPLUCK: 33,\n\t\t\tWITHOUT: 34,\n\t\t\tMERGE: 35,\n\t\t\tBETWEEN_DEPRECATED: 36,\n\t\t\tBETWEEN: 182,\n\t\t\tREDUCE: 37,\n\t\t\tMAP: 38,\n\t\t\tFOLD: 187,\n\t\t\tFILTER: 39,\n\t\t\tCONCAT_MAP: 40,\n\t\t\tORDER_BY: 41,\n\t\t\tDISTINCT: 42,\n\t\t\tCOUNT: 43,\n\t\t\tIS_EMPTY: 86,\n\t\t\tUNION: 44,\n\t\t\tNTH: 45,\n\t\t\tBRACKET: 170,\n\t\t\tINNER_JOIN: 48,\n\t\t\tOUTER_JOIN: 49,\n\t\t\tEQ_JOIN: 50,\n\t\t\tZIP: 72,\n\t\t\tRANGE: 173,\n\t\t\tINSERT_AT: 82,\n\t\t\tDELETE_AT: 83,\n\t\t\tCHANGE_AT: 84,\n\t\t\tSPLICE_AT: 85,\n\t\t\tCOERCE_TO: 51,\n\t\t\tTYPE_OF: 52,\n\t\t\tUPDATE: 53,\n\t\t\tDELETE: 54,\n\t\t\tREPLACE: 55,\n\t\t\tINSERT: 56,\n\t\t\tDB_CREATE: 57,\n\t\t\tDB_DROP: 58,\n\t\t\tDB_LIST: 59,\n\t\t\tTABLE_CREATE: 60,\n\t\t\tTABLE_DROP: 61,\n\t\t\tTABLE_LIST: 62,\n\t\t\tCONFIG: 174,\n\t\t\tSTATUS: 175,\n\t\t\tWAIT: 177,\n\t\t\tRECONFIGURE: 176,\n\t\t\tREBALANCE: 179,\n\t\t\tSYNC: 138,\n\t\t\tGRANT: 188,\n\t\t\tINDEX_CREATE: 75,\n\t\t\tINDEX_DROP: 76,\n\t\t\tINDEX_LIST: 77,\n\t\t\tINDEX_STATUS: 139,\n\t\t\tINDEX_WAIT: 140,\n\t\t\tINDEX_RENAME: 156,\n\t\t\tFUNCALL: 64,\n\t\t\tBRANCH: 65,\n\t\t\tOR: 66,\n\t\t\tAND: 67,\n\t\t\tFOR_EACH: 68,\n\t\t\tFUNC: 69,\n\t\t\tASC: 73,\n\t\t\tDESC: 74,\n\t\t\tINFO: 79,\n\t\t\tMATCH: 97,\n\t\t\tUPCASE: 141,\n\t\t\tDOWNCASE: 142,\n\t\t\tSAMPLE: 81,\n\t\t\tDEFAULT: 92,\n\t\t\tJSON: 98,\n\t\t\tTO_JSON_STRING: 172,\n\t\t\tISO8601: 99,\n\t\t\tTO_ISO8601: 100,\n\t\t\tEPOCH_TIME: 101,\n\t\t\tTO_EPOCH_TIME: 102,\n\t\t\tNOW: 103,\n\t\t\tIN_TIMEZONE: 104,\n\t\t\tDURING: 105,\n\t\t\tDATE: 106,\n\t\t\tTIME_OF_DAY: 126,\n\t\t\tTIMEZONE: 127,\n\t\t\tYEAR: 128,\n\t\t\tMONTH: 129,\n\t\t\tDAY: 130,\n\t\t\tDAY_OF_WEEK: 131,\n\t\t\tDAY_OF_YEAR: 132,\n\t\t\tHOURS: 133,\n\t\t\tMINUTES: 134,\n\t\t\tSECONDS: 135,\n\t\t\tTIME: 136,\n\t\t\tMONDAY: 107,\n\t\t\tTUESDAY: 108,\n\t\t\tWEDNESDAY: 109,\n\t\t\tTHURSDAY: 110,\n\t\t\tFRIDAY: 111,\n\t\t\tSATURDAY: 112,\n\t\t\tSUNDAY: 113,\n\t\t\tJANUARY: 114,\n\t\t\tFEBRUARY: 115,\n\t\t\tMARCH: 116,\n\t\t\tAPRIL: 117,\n\t\t\tMAY: 118,\n\t\t\tJUNE: 119,\n\t\t\tJULY: 120,\n\t\t\tAUGUST: 121,\n\t\t\tSEPTEMBER: 122,\n\t\t\tOCTOBER: 123,\n\t\t\tNOVEMBER: 124,\n\t\t\tDECEMBER: 125,\n\t\t\tLITERAL: 137,\n\t\t\tGROUP: 144,\n\t\t\tSUM: 145,\n\t\t\tAVG: 146,\n\t\t\tMIN: 147,\n\t\t\tMAX: 148,\n\t\t\tSPLIT: 149,\n\t\t\tUNGROUP: 150,\n\t\t\tRANDOM: 151,\n\t\t\tCHANGES: 152,\n\t\t\tARGS: 154,\n\t\t\tBINARY: 155,\n\t\t\tGEOJSON: 157,\n\t\t\tTO_GEOJSON: 158,\n\t\t\tPOINT: 159,\n\t\t\tLINE: 160,\n\t\t\tPOLYGON: 161,\n\t\t\tDISTANCE: 162,\n\t\t\tINTERSECTS: 163,\n\t\t\tINCLUDES: 164,\n\t\t\tCIRCLE: 165,\n\t\t\tGET_INTERSECTING: 166,\n\t\t\tFILL: 167,\n\t\t\tGET_NEAREST: 168,\n\t\t\tPOLYGON_SUB: 171,\n\t\t\tMINVAL: 180,\n\t\t\tMAXVAL: 181\n\t\t},\n\t\t\n\t\tAssocPair: {}\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/cursor.js":"// Generated by CoffeeScript 1.10.0\nvar ArrayResult, AtomFeed, Cursor, EventEmitter, Feed, IterableResult, OrderByLimitFeed, Promise, UnionedFeed, ar, aropt, error, mkErr, protoResponseType, setImmediate, util, varar,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  slice = [].slice,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nerror = require('./errors');\n\nutil = require('./util');\n\nprotoResponseType = require('./proto-def').Response.ResponseType;\n\nPromise = require('bluebird');\n\nEventEmitter = require('events').EventEmitter;\n\nar = util.ar;\n\nvarar = util.varar;\n\naropt = util.aropt;\n\nmkErr = util.mkErr;\n\nif (typeof setImmediate === \"undefined\" || setImmediate === null) {\n  setImmediate = function(cb) {\n    return setTimeout(cb, 0);\n  };\n}\n\nIterableResult = (function() {\n  IterableResult.prototype.stackSize = 100;\n\n  function IterableResult(conn, token, opts, root) {\n    this._eachCb = bind(this._eachCb, this);\n    this._conn = conn;\n    this._token = token;\n    this._opts = opts;\n    this._root = root;\n    this._responses = [];\n    this._responseIndex = 0;\n    this._outstandingRequests = 1;\n    this._iterations = 0;\n    this._endFlag = false;\n    this._contFlag = false;\n    this._closeAsap = false;\n    this._cont = null;\n    this._cbQueue = [];\n    this._closeCb = null;\n    this._closeCbPromise = null;\n    this.next = this._next;\n  }\n\n  IterableResult.prototype._addResponse = function(response) {\n    if (response.t === this._type || response.t === protoResponseType.SUCCESS_SEQUENCE) {\n      if (response.r.length > 0) {\n        this._responses.push(response);\n      }\n    } else {\n      this._responses.push(response);\n    }\n    this._outstandingRequests -= 1;\n    if (response.t !== this._type) {\n      this._endFlag = true;\n      if (this._closeCb != null) {\n        switch (response.t) {\n          case protoResponseType.COMPILE_ERROR:\n            this._closeCb(mkErr(error.ReqlServerCompileError, response, this._root));\n            break;\n          case protoResponseType.CLIENT_ERROR:\n            this._closeCb(mkErr(error.ReqlClientError, response, this._root));\n            break;\n          case protoResponseType.RUNTIME_ERROR:\n            this._closeCb(mkErr(util.errorClass(response.e), response, this._root));\n            break;\n          default:\n            this._closeCb();\n        }\n      }\n    }\n    this._contFlag = false;\n    if (this._closeAsap === false) {\n      this._promptNext();\n    } else {\n      this.close(this._closeCb);\n    }\n    return this;\n  };\n\n  IterableResult.prototype._getCallback = function() {\n    var cb, immediateCb;\n    this._iterations += 1;\n    cb = this._cbQueue.shift();\n    if (this._iterations % this.stackSize === this.stackSize - 1) {\n      immediateCb = (function(err, row) {\n        return setImmediate(function() {\n          return cb(err, row);\n        });\n      });\n      return immediateCb;\n    } else {\n      return cb;\n    }\n  };\n\n  IterableResult.prototype._handleRow = function() {\n    var cb, response, row;\n    response = this._responses[0];\n    row = util.recursivelyConvertPseudotype(response.r[this._responseIndex], this._opts);\n    cb = this._getCallback();\n    this._responseIndex += 1;\n    if (this._responseIndex === response.r.length) {\n      this._responses.shift();\n      this._responseIndex = 0;\n    }\n    return cb(null, row);\n  };\n\n  IterableResult.prototype.bufferEmpty = function() {\n    return this._responses.length === 0 || this._responses[0].r.length <= this._responseIndex;\n  };\n\n  IterableResult.prototype._promptNext = function() {\n    var cb, errType, response;\n    if (this._closeCbPromise != null) {\n      cb = this._getCallback();\n      cb(new error.ReqlDriverError(\"Cursor is closed.\"));\n    }\n    while (this._cbQueue[0] != null) {\n      if (this.bufferEmpty() === true) {\n        if (this._endFlag === true) {\n          cb = this._getCallback();\n          cb(new error.ReqlDriverError(\"No more rows in the cursor.\"));\n        } else if (this._responses.length <= 1) {\n          this._promptCont();\n        }\n        return;\n      } else {\n        response = this._responses[0];\n        if (this._responses.length === 1) {\n          this._promptCont();\n        }\n        switch (response.t) {\n          case protoResponseType.SUCCESS_PARTIAL:\n            this._handleRow();\n            break;\n          case protoResponseType.SUCCESS_SEQUENCE:\n            if (response.r.length === 0) {\n              this._responses.shift();\n            } else {\n              this._handleRow();\n            }\n            break;\n          case protoResponseType.COMPILE_ERROR:\n            this._responses.shift();\n            cb = this._getCallback();\n            cb(mkErr(error.ReqlServerCompileError, response, this._root));\n            break;\n          case protoResponseType.CLIENT_ERROR:\n            this._responses.shift();\n            cb = this._getCallback();\n            cb(mkErr(error.ReqlClientError, response, this._root));\n            break;\n          case protoResponseType.RUNTIME_ERROR:\n            this._responses.shift();\n            cb = this._getCallback();\n            errType = util.errorClass(response.e);\n            cb(mkErr(errType, response, this._root));\n            break;\n          default:\n            this._responses.shift();\n            cb = this._getCallback();\n            cb(new error.ReqlDriverError(\"Unknown response type for cursor\"));\n        }\n      }\n    }\n  };\n\n  IterableResult.prototype._promptCont = function() {\n    if ((!this._contFlag) && (!this._endFlag) && this._conn.isOpen()) {\n      this._contFlag = true;\n      this._outstandingRequests += 1;\n      return this._conn._continueQuery(this._token);\n    }\n  };\n\n  IterableResult.prototype.hasNext = function() {\n    throw new error.ReqlDriverError(\"The `hasNext` command has been removed since 1.13. Use `next` instead.\");\n  };\n\n  IterableResult.prototype._next = varar(0, 1, function(cb) {\n    var fn;\n    if ((cb != null) && typeof cb !== \"function\") {\n      throw new error.ReqlDriverError(\"First argument to `next` must be a function or undefined.\");\n    }\n    fn = (function(_this) {\n      return function(cb) {\n        _this._cbQueue.push(cb);\n        return _this._promptNext();\n      };\n    })(this);\n    return Promise.fromNode(fn).nodeify(cb);\n  });\n\n  IterableResult.prototype.close = varar(0, 1, function(cb) {\n    if (this._closeCbPromise != null) {\n      if (this._closeCbPromise.isPending()) {\n        this._closeCbPromise = this._closeCbPromise.nodeify(cb);\n      } else {\n        this._closeCbPromise = Promise.resolve().nodeify(cb);\n      }\n    } else {\n      if (this._endFlag) {\n        this._closeCbPromise = Promise.resolve().nodeify(cb);\n        this._responses = [];\n        this._responseIndex = 0;\n      } else {\n        this._closeCbPromise = new Promise((function(_this) {\n          return function(resolve, reject) {\n            _this._closeCb = function(err) {\n              _this._responses = [];\n              _this._responseIndex = 0;\n              while (_this._cbQueue.length > 0) {\n                _this._cbQueue.shift();\n              }\n              _this._outstandingRequests = 0;\n              if (err) {\n                return reject(err);\n              } else {\n                return resolve();\n              }\n            };\n            _this._closeAsap = true;\n            _this._outstandingRequests += 1;\n            return _this._conn._endQuery(_this._token);\n          };\n        })(this)).nodeify(cb);\n      }\n    }\n    return this._closeCbPromise;\n  });\n\n  IterableResult.prototype.each = varar(1, 2, function(cb, onFinished) {\n    var nextCb, self;\n    if (typeof cb !== 'function') {\n      throw new error.ReqlDriverError(\"First argument to each must be a function.\");\n    }\n    if ((onFinished != null) && typeof onFinished !== 'function') {\n      throw new error.ReqlDriverError(\"Optional second argument to each must be a function.\");\n    }\n    self = this;\n    nextCb = (function(_this) {\n      return function(err, data) {\n        if (err != null) {\n          if (err.message === 'No more rows in the cursor.') {\n            return typeof onFinished === \"function\" ? onFinished() : void 0;\n          } else {\n            return cb(err);\n          }\n        } else if (cb(null, data) !== false) {\n          return _this._next(nextCb);\n        } else {\n          return typeof onFinished === \"function\" ? onFinished() : void 0;\n        }\n      };\n    })(this);\n    return this._next(nextCb);\n  });\n\n  IterableResult.prototype.eachAsync = varar(1, 3, function(cb, errCb, options) {\n    var nextCb, pending, resPromise, userCb;\n    if (options == null) {\n      options = {\n        concurrency: 1\n      };\n    }\n    if (typeof cb !== 'function') {\n      throw new error.ReqlDriverError('First argument to eachAsync must be a function.');\n    }\n    if (errCb != null) {\n      if (typeof errCb === 'object') {\n        options = errCb;\n        errCb = void 0;\n      } else if (typeof errCb !== 'function') {\n        throw new error.ReqlDriverError(\"Optional second argument to eachAsync must be a function or `options` object\");\n      }\n    }\n    if (!(options && typeof options.concurrency === 'number' && options.concurrency > 0)) {\n      throw new error.ReqlDriverError(\"Optional `options.concurrency` argument to eachAsync must be a positive number\");\n    }\n    pending = [];\n    userCb = function(data) {\n      var doneChecking, handlerArg, handlerCalled, ret;\n      if (cb.length <= 1) {\n        ret = Promise.resolve(cb(data));\n      } else {\n        handlerCalled = false;\n        doneChecking = false;\n        handlerArg = void 0;\n        ret = Promise.fromNode(function(handler) {\n          var asyncRet;\n          asyncRet = cb(data, function(err) {\n            handlerCalled = true;\n            if (doneChecking) {\n              return handler(err);\n            } else {\n              return handlerArg = err;\n            }\n          });\n          if (asyncRet !== void 0) {\n            handler(new error.ReqlDriverError(\"A two-argument row handler for eachAsync may only return undefined.\"));\n          } else if (handlerCalled) {\n            handler(handlerArg);\n          }\n          return doneChecking = true;\n        });\n      }\n      return ret.then(function(data) {\n        if (data === void 0 || typeof data === Promise) {\n          return data;\n        }\n        throw new error.ReqlDriverError(\"Row handler for eachAsync may only return a Promise or undefined.\");\n      });\n    };\n    nextCb = (function(_this) {\n      return function() {\n        if (_this._closeCbPromise != null) {\n          return Promise.resolve().then(function(data) {\n            throw new error.ReqlDriverError(\"Cursor is closed.\");\n          });\n        } else {\n          return _this._next().then(function(data) {\n            if (pending.length < options.concurrency) {\n              return data;\n            }\n            return Promise.any(pending)[\"catch\"](Promise.AggregateError, function(errs) {\n              throw errs[0];\n            })[\"return\"](data);\n          }).then(function(data) {\n            var p;\n            p = userCb(data).then(function() {\n              return pending.splice(pending.indexOf(p), 1);\n            });\n            return pending.push(p);\n          }).then(nextCb)[\"catch\"](function(err) {\n            if ((err != null ? err.message : void 0) !== 'No more rows in the cursor.') {\n              throw err;\n            }\n            return Promise.all(pending);\n          });\n        }\n      };\n    })(this);\n    resPromise = nextCb().then(function() {\n      if (errCb != null) {\n        return errCb(null);\n      }\n    })[\"catch\"](function(err) {\n      if (errCb != null) {\n        return errCb(err);\n      }\n      throw err;\n    });\n    if (errCb == null) {\n      return resPromise;\n    }\n    return null;\n  });\n\n  IterableResult.prototype._each = IterableResult.prototype.each;\n\n  IterableResult.prototype._eachAsync = IterableResult.prototype.eachAsync;\n\n  IterableResult.prototype.toArray = varar(0, 1, function(cb) {\n    var results, wrapper;\n    if ((cb != null) && typeof cb !== 'function') {\n      throw new error.ReqlDriverCompileError(\"First argument to `toArray` must be a function or undefined.\");\n    }\n    results = [];\n    wrapper = (function(_this) {\n      return function(res) {\n        results.push(res);\n        return void 0;\n      };\n    })(this);\n    return this.eachAsync(wrapper).then((function(_this) {\n      return function() {\n        return results;\n      };\n    })(this)).nodeify(cb);\n  });\n\n  IterableResult.prototype._makeEmitter = function() {\n    this.emitter = new EventEmitter;\n    this.each = function() {\n      throw new error.ReqlDriverError(\"You cannot use the cursor interface and the EventEmitter interface at the same time.\");\n    };\n    return this.next = function() {\n      throw new error.ReqlDriverError(\"You cannot use the cursor interface and the EventEmitter interface at the same time.\");\n    };\n  };\n\n  IterableResult.prototype.addListener = function(event, listener) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.addListener(event, listener);\n  };\n\n  IterableResult.prototype.on = function(event, listener) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.on(event, listener);\n  };\n\n  IterableResult.prototype.once = function(event, listener) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.once(event, listener);\n  };\n\n  IterableResult.prototype.removeListener = function(event, listener) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.removeListener(event, listener);\n  };\n\n  IterableResult.prototype.removeAllListeners = function(event) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.removeAllListeners(event);\n  };\n\n  IterableResult.prototype.setMaxListeners = function(n) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.setMaxListeners(n);\n  };\n\n  IterableResult.prototype.listeners = function(event) {\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return this.emitter.listeners(event);\n  };\n\n  IterableResult.prototype.emit = function() {\n    var args, ref;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (this.emitter == null) {\n      this._makeEmitter();\n      setImmediate((function(_this) {\n        return function() {\n          return _this._each(_this._eachCb);\n        };\n      })(this));\n    }\n    return (ref = this.emitter).emit.apply(ref, args);\n  };\n\n  IterableResult.prototype._eachCb = function(err, data) {\n    if (err != null) {\n      return this.emitter.emit('error', err);\n    } else {\n      return this.emitter.emit('data', data);\n    }\n  };\n\n  return IterableResult;\n\n})();\n\nCursor = (function(superClass) {\n  extend(Cursor, superClass);\n\n  function Cursor() {\n    this._type = protoResponseType.SUCCESS_PARTIAL;\n    Cursor.__super__.constructor.apply(this, arguments);\n  }\n\n  Cursor.prototype.toString = ar(function() {\n    return \"[object Cursor]\";\n  });\n\n  return Cursor;\n\n})(IterableResult);\n\nFeed = (function(superClass) {\n  extend(Feed, superClass);\n\n  function Feed() {\n    this._type = protoResponseType.SUCCESS_PARTIAL;\n    Feed.__super__.constructor.apply(this, arguments);\n  }\n\n  Feed.prototype.hasNext = function() {\n    throw new error.ReqlDriverError(\"`hasNext` is not available for feeds.\");\n  };\n\n  Feed.prototype.toArray = function() {\n    throw new error.ReqlDriverError(\"`toArray` is not available for feeds.\");\n  };\n\n  Feed.prototype.toString = ar(function() {\n    return \"[object Feed]\";\n  });\n\n  return Feed;\n\n})(IterableResult);\n\nUnionedFeed = (function(superClass) {\n  extend(UnionedFeed, superClass);\n\n  function UnionedFeed() {\n    this._type = protoResponseType.SUCCESS_PARTIAL;\n    UnionedFeed.__super__.constructor.apply(this, arguments);\n  }\n\n  UnionedFeed.prototype.hasNext = function() {\n    throw new error.ReqlDriverError(\"`hasNext` is not available for feeds.\");\n  };\n\n  UnionedFeed.prototype.toArray = function() {\n    throw new error.ReqlDriverError(\"`toArray` is not available for feeds.\");\n  };\n\n  UnionedFeed.prototype.toString = ar(function() {\n    return \"[object UnionedFeed]\";\n  });\n\n  return UnionedFeed;\n\n})(IterableResult);\n\nAtomFeed = (function(superClass) {\n  extend(AtomFeed, superClass);\n\n  function AtomFeed() {\n    this._type = protoResponseType.SUCCESS_PARTIAL;\n    AtomFeed.__super__.constructor.apply(this, arguments);\n  }\n\n  AtomFeed.prototype.hasNext = function() {\n    throw new error.ReqlDriverError(\"`hasNext` is not available for feeds.\");\n  };\n\n  AtomFeed.prototype.toArray = function() {\n    throw new error.ReqlDriverError(\"`toArray` is not available for feeds.\");\n  };\n\n  AtomFeed.prototype.toString = ar(function() {\n    return \"[object AtomFeed]\";\n  });\n\n  return AtomFeed;\n\n})(IterableResult);\n\nOrderByLimitFeed = (function(superClass) {\n  extend(OrderByLimitFeed, superClass);\n\n  function OrderByLimitFeed() {\n    this._type = protoResponseType.SUCCESS_PARTIAL;\n    OrderByLimitFeed.__super__.constructor.apply(this, arguments);\n  }\n\n  OrderByLimitFeed.prototype.hasNext = function() {\n    throw new error.ReqlDriverError(\"`hasNext` is not available for feeds.\");\n  };\n\n  OrderByLimitFeed.prototype.toArray = function() {\n    throw new error.ReqlDriverError(\"`toArray` is not available for feeds.\");\n  };\n\n  OrderByLimitFeed.prototype.toString = ar(function() {\n    return \"[object OrderByLimitFeed]\";\n  });\n\n  return OrderByLimitFeed;\n\n})(IterableResult);\n\nArrayResult = (function(superClass) {\n  extend(ArrayResult, superClass);\n\n  function ArrayResult() {\n    return ArrayResult.__super__.constructor.apply(this, arguments);\n  }\n\n  ArrayResult.prototype._hasNext = ar(function() {\n    if (this.__index == null) {\n      this.__index = 0;\n    }\n    return this.__index < this.length;\n  });\n\n  ArrayResult.prototype._next = varar(0, 1, function(cb) {\n    var fn;\n    fn = (function(_this) {\n      return function(cb) {\n        var self;\n        if (_this._closeCbPromise != null) {\n          cb(new error.ReqlDriverError(\"Cursor is closed.\"));\n        }\n        if (_this._hasNext() === true) {\n          self = _this;\n          if (self.__index % _this.stackSize === _this.stackSize - 1) {\n            return setImmediate(function() {\n              return cb(null, self[self.__index++]);\n            });\n          } else {\n            return cb(null, self[self.__index++]);\n          }\n        } else {\n          return cb(new error.ReqlDriverError(\"No more rows in the cursor.\"));\n        }\n      };\n    })(this);\n    return Promise.fromNode(fn).nodeify(cb);\n  });\n\n  ArrayResult.prototype.toArray = varar(0, 1, function(cb) {\n    var fn;\n    fn = (function(_this) {\n      return function(cb) {\n        if (_this._closeCbPromise != null) {\n          cb(new error.ReqlDriverError(\"Cursor is closed.\"));\n        }\n        if (_this.__index != null) {\n          return cb(null, _this.slice(_this.__index, _this.length));\n        } else {\n          return cb(null, _this);\n        }\n      };\n    })(this);\n    return Promise.fromNode(fn).nodeify(cb);\n  });\n\n  ArrayResult.prototype.close = varar(0, 1, function(cb) {\n    this.length = 0;\n    this.__index = 0;\n    this._closeCbPromise = Promise.resolve().nodeify(cb);\n    return this._closeCbPromise;\n  });\n\n  ArrayResult.prototype.makeIterable = function(response) {\n    var method, name, ref;\n    response.__proto__ = {};\n    ref = ArrayResult.prototype;\n    for (name in ref) {\n      method = ref[name];\n      if (name !== 'constructor') {\n        if (name === '_next') {\n          response.__proto__['next'] = method;\n          response.__proto__['_next'] = method;\n        } else {\n          response.__proto__[name] = method;\n        }\n      }\n    }\n    response.__proto__.__proto__ = [].__proto__;\n    return response;\n  };\n\n  return ArrayResult;\n\n})(IterableResult);\n\nmodule.exports.Cursor = Cursor;\n\nmodule.exports.Feed = Feed;\n\nmodule.exports.AtomFeed = AtomFeed;\n\nmodule.exports.OrderByLimitFeed = OrderByLimitFeed;\n\nmodule.exports.makeIterable = ArrayResult.prototype.makeIterable;\n","/home/travis/build/npmtest/node-npmtest-rethinkdb/node_modules/rethinkdb/ast.js":"// Generated by CoffeeScript 1.10.0\nvar Add, And, Append, Args, Asc, Avg, Between, Binary, Bracket, Branch, Ceil, ChangeAt, Changes, Circle, CoerceTo, ConcatMap, Config, Contains, Count, DatumTerm, Day, DayOfWeek, DayOfYear, Db, DbCreate, DbDrop, DbList, Default, Delete, DeleteAt, Desc, Difference, Distance, Distinct, Div, Downcase, During, EpochTime, Eq, EqJoin, Fill, Filter, Floor, Fold, ForEach, FunCall, Func, Ge, Geojson, Get, GetAll, GetField, GetIntersecting, GetNearest, Grant, Group, Gt, HasFields, Hours, Http, ISO8601, ImplicitVar, InTimezone, Includes, IndexCreate, IndexDrop, IndexList, IndexRename, IndexStatus, IndexWait, Info, InnerJoin, Insert, InsertAt, Intersects, IsEmpty, JavaScript, Json, Keys, Le, Limit, Line, Literal, Lt, MakeArray, MakeObject, Map, Match, Max, Merge, Min, Minutes, Mod, Month, Mul, Ne, Not, Now, Nth, Object_, OffsetsOf, Or, OrderBy, OuterJoin, Pluck, Point, Polygon, PolygonSub, Prepend, Promise, RDBConstant, RDBOp, RDBVal, RQLDate, Random, Range, Rebalance, Reconfigure, Reduce, Replace, Round, Sample, Seconds, SetDifference, SetInsert, SetIntersection, SetUnion, Skip, Slice, SpliceAt, Split, Status, Sub, Sum, Sync, Table, TableCreate, TableDrop, TableList, TermBase, Time, TimeOfDay, Timezone, ToEpochTime, ToGeojson, ToISO8601, ToJsonString, TypeOf, UUID, Ungroup, Union, Upcase, Update, UserError, Values, Var, Wait, WithFields, Without, Year, Zip, ar, aropt, err, funcWrap, hasImplicit, intsp, intspallargs, kved, net, protoTermType, rethinkdb, shouldWrap, translateBackOptargs, translateOptargs, util, varar,\n  slice = [].slice,\n  hasProp = {}.hasOwnProperty,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nutil = require('./util');\n\nerr = require('./errors');\n\nnet = require('./net');\n\nprotoTermType = require('./proto-def').Term.TermType;\n\nPromise = require('bluebird');\n\nar = util.ar;\n\nvarar = util.varar;\n\naropt = util.aropt;\n\nrethinkdb = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return rethinkdb.expr.apply(rethinkdb, args);\n};\n\nfuncWrap = function(val) {\n  var ivarScan;\n  if (val === void 0) {\n    return val;\n  }\n  val = rethinkdb.expr(val);\n  ivarScan = function(node) {\n    var k, v;\n    if (!(node instanceof TermBase)) {\n      return false;\n    }\n    if (node instanceof ImplicitVar) {\n      return true;\n    }\n    if ((node.args.map(ivarScan)).some(function(a) {\n      return a;\n    })) {\n      return true;\n    }\n    if (((function() {\n      var ref, results;\n      ref = node.optargs;\n      results = [];\n      for (k in ref) {\n        if (!hasProp.call(ref, k)) continue;\n        v = ref[k];\n        results.push(v);\n      }\n      return results;\n    })()).map(ivarScan).some(function(a) {\n      return a;\n    })) {\n      return true;\n    }\n    return false;\n  };\n  if (ivarScan(val)) {\n    return new Func({}, function(x) {\n      return val;\n    });\n  }\n  return val;\n};\n\nhasImplicit = function(args) {\n  var arg, j, len;\n  if (Array.isArray(args)) {\n    for (j = 0, len = args.length; j < len; j++) {\n      arg = args[j];\n      if (hasImplicit(arg) === true) {\n        return true;\n      }\n    }\n  } else if (args === 'r.row') {\n    return true;\n  }\n  return false;\n};\n\nTermBase = (function() {\n  TermBase.prototype.showRunWarning = true;\n\n  function TermBase() {\n    var self;\n    if ({}.__proto__ !== void 0) {\n      self = ar(function(field) {\n        return self.bracket(field);\n      });\n      self.__proto__ = this.__proto__;\n      return self;\n    } else {\n      return this;\n    }\n  }\n\n  TermBase.prototype.run = function(connection, options, callback) {\n    if (net.isConnection(connection) === true) {\n      if (typeof options === \"function\") {\n        if (callback === void 0) {\n          callback = options;\n          options = {};\n        } else {\n          return Promise.reject(new err.ReqlDriverError(\"Second argument to `run` cannot be a function if a third argument is provided.\")).nodeify(options);\n        }\n      }\n    } else if ((connection != null ? connection.constructor : void 0) === Object) {\n      if (this.showRunWarning === true) {\n        if (typeof process !== \"undefined\" && process !== null) {\n          process.stderr.write(\"RethinkDB warning: This syntax is deprecated. Please use `run(connection[, options], callback)`.\");\n        }\n        this.showRunWarning = false;\n      }\n      callback = options;\n      options = connection;\n      connection = connection.connection;\n      delete options[\"connection\"];\n    }\n    if (options == null) {\n      options = {};\n    }\n    if ((callback != null) && typeof callback !== 'function') {\n      return Promise.reject(new err.ReqlDriverError(\"If provided, the callback must be a function. Please use `run(connection[, options][, callback])\"));\n    }\n    if (net.isConnection(connection) === false) {\n      return Promise.reject(new err.ReqlDriverError(\"First argument to `run` must be an open connection.\")).nodeify(callback);\n    }\n    return new Promise((function(_this) {\n      return function(resolve, reject) {\n        var e, error, wrappedCb;\n        wrappedCb = function(err, result) {\n          if (err != null) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        };\n        try {\n          return connection._start(_this, wrappedCb, options);\n        } catch (error) {\n          e = error;\n          return wrappedCb(e);\n        }\n      };\n    })(this)).nodeify(callback);\n  };\n\n  TermBase.prototype.toString = function() {\n    return err.printQuery(this);\n  };\n\n  return TermBase;\n\n})();\n\nRDBVal = (function(superClass) {\n  extend(RDBVal, superClass);\n\n  function RDBVal() {\n    return RDBVal.__super__.constructor.apply(this, arguments);\n  }\n\n  RDBVal.prototype.eq = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Eq, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.ne = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Ne, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.lt = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Lt, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.le = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Le, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.gt = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Gt, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.ge = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Ge, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.not = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Not, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.add = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Add, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.sub = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Sub, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.mul = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Mul, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.div = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Div, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.mod = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Mod, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.floor = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Floor, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.ceil = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Ceil, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.round = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Round, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.append = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Append, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.prepend = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Prepend, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.difference = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Difference, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.setInsert = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(SetInsert, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.setUnion = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(SetUnion, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.setIntersection = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(SetIntersection, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.setDifference = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(SetDifference, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.slice = varar(1, 3, function(left, right_or_opts, opts) {\n    if (opts != null) {\n      return new Slice(opts, this, left, right_or_opts);\n    } else if (typeof right_or_opts !== 'undefined') {\n      if ((Object.prototype.toString.call(right_or_opts) === '[object Object]') && !(right_or_opts instanceof TermBase)) {\n        return new Slice(right_or_opts, this, left);\n      } else {\n        return new Slice({}, this, left, right_or_opts);\n      }\n    } else {\n      return new Slice({}, this, left);\n    }\n  });\n\n  RDBVal.prototype.skip = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Skip, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.limit = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Limit, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.getField = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(GetField, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.contains = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Contains, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.insertAt = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(InsertAt, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.spliceAt = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(SpliceAt, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.deleteAt = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(DeleteAt, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.changeAt = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ChangeAt, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.offsetsOf = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(OffsetsOf, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.hasFields = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(HasFields, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.withFields = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(WithFields, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.keys = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Keys, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.values = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Values, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.changes = aropt(function(opts) {\n    return new Changes(opts, this);\n  });\n\n  RDBVal.prototype.pluck = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Pluck, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.without = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Without, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.merge = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Merge, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.between = aropt(function(left, right, opts) {\n    return new Between(opts, this, left, right);\n  });\n\n  RDBVal.prototype.reduce = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Reduce, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.map = varar(1, null, function() {\n    var args, funcArg, j;\n    args = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), funcArg = arguments[j++];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Map, [{}, this].concat(slice.call(args), [funcWrap(funcArg)]), function(){});\n  });\n\n  RDBVal.prototype.fold = aropt(function(baseArg, accFuncArg, opts) {\n    return new Fold(opts, this, baseArg, funcWrap(accFuncArg));\n  });\n\n  RDBVal.prototype.filter = aropt(function(predicate, opts) {\n    return new Filter(opts, this, funcWrap(predicate));\n  });\n\n  RDBVal.prototype.concatMap = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ConcatMap, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.distinct = aropt(function(opts) {\n    return new Distinct(opts, this);\n  });\n\n  RDBVal.prototype.count = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Count, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.union = function() {\n    var attr, attrs, attrsAndOpts, opts, perhapsOptDict;\n    attrsAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    opts = {};\n    attrs = attrsAndOpts;\n    perhapsOptDict = attrsAndOpts[attrsAndOpts.length - 1];\n    if (perhapsOptDict && (Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase)) {\n      opts = perhapsOptDict;\n      attrs = attrsAndOpts.slice(0, attrsAndOpts.length - 1);\n    }\n    attrs = (function() {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = attrs.length; j < len; j++) {\n        attr = attrs[j];\n        if (attr instanceof Asc || attr instanceof Desc) {\n          results.push(attr);\n        } else {\n          results.push(funcWrap(attr));\n        }\n      }\n      return results;\n    })();\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Union, [opts, this].concat(slice.call(attrs)), function(){});\n  };\n\n  RDBVal.prototype.nth = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Nth, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.bracket = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Bracket, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.toJSON = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ToJsonString, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.toJsonString = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ToJsonString, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.match = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Match, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.split = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Split, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.upcase = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Upcase, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.downcase = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Downcase, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.isEmpty = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(IsEmpty, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.innerJoin = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(InnerJoin, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.outerJoin = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(OuterJoin, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.eqJoin = aropt(function(left_attr, right, opts) {\n    return new EqJoin(opts, this, funcWrap(left_attr), right);\n  });\n\n  RDBVal.prototype.zip = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Zip, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.coerceTo = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(CoerceTo, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.ungroup = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Ungroup, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.typeOf = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(TypeOf, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.update = aropt(function(func, opts) {\n    return new Update(opts, this, funcWrap(func));\n  });\n\n  RDBVal.prototype[\"delete\"] = aropt(function(opts) {\n    return new Delete(opts, this);\n  });\n\n  RDBVal.prototype.replace = aropt(function(func, opts) {\n    return new Replace(opts, this, funcWrap(func));\n  });\n\n  RDBVal.prototype[\"do\"] = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(FunCall, [{}, funcWrap(args.slice(-1)[0]), this].concat(slice.call(args.slice(0, -1))), function(){});\n  };\n\n  RDBVal.prototype[\"default\"] = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Default, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.or = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Or, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.and = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(And, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.branch = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Branch, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.forEach = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ForEach, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.sum = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Sum, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.avg = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Avg, [{}, this].concat(slice.call(args.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.info = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Info, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.sample = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Sample, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.group = function() {\n    var fields, fieldsAndOpts, opts, perhapsOptDict;\n    fieldsAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    opts = {};\n    fields = fieldsAndOpts;\n    if (fieldsAndOpts.length > 0) {\n      perhapsOptDict = fieldsAndOpts[fieldsAndOpts.length - 1];\n      if (perhapsOptDict && (Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase)) {\n        opts = perhapsOptDict;\n        fields = fieldsAndOpts.slice(0, fieldsAndOpts.length - 1);\n      }\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Group, [opts, this].concat(slice.call(fields.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.orderBy = function() {\n    var attr, attrs, attrsAndOpts, opts, perhapsOptDict;\n    attrsAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    opts = {};\n    attrs = attrsAndOpts;\n    perhapsOptDict = attrsAndOpts[attrsAndOpts.length - 1];\n    if (perhapsOptDict && (Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase)) {\n      opts = perhapsOptDict;\n      attrs = attrsAndOpts.slice(0, attrsAndOpts.length - 1);\n    }\n    attrs = (function() {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = attrs.length; j < len; j++) {\n        attr = attrs[j];\n        if (attr instanceof Asc || attr instanceof Desc) {\n          results.push(attr);\n        } else {\n          results.push(funcWrap(attr));\n        }\n      }\n      return results;\n    })();\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(OrderBy, [opts, this].concat(slice.call(attrs)), function(){});\n  };\n\n  RDBVal.prototype.toGeojson = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ToGeojson, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.distance = aropt(function(g, opts) {\n    return new Distance(opts, this, g);\n  });\n\n  RDBVal.prototype.intersects = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Intersects, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.includes = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Includes, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.fill = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Fill, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.polygonSub = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(PolygonSub, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.tableCreate = aropt(function(tblName, opts) {\n    return new TableCreate(opts, this, tblName);\n  });\n\n  RDBVal.prototype.tableDrop = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(TableDrop, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.tableList = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(TableList, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.config = function() {\n    return new Config({}, this);\n  };\n\n  RDBVal.prototype.status = function() {\n    return new Status({}, this);\n  };\n\n  RDBVal.prototype.wait = aropt(function(opts) {\n    return new Wait(opts, this);\n  });\n\n  RDBVal.prototype.table = aropt(function(tblName, opts) {\n    return new Table(opts, this, tblName);\n  });\n\n  RDBVal.prototype.get = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Get, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.getAll = function() {\n    var keys, keysAndOpts, opts, perhapsOptDict;\n    keysAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    opts = {};\n    keys = keysAndOpts;\n    if (keysAndOpts.length > 1) {\n      perhapsOptDict = keysAndOpts[keysAndOpts.length - 1];\n      if (perhapsOptDict && ((Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase))) {\n        opts = perhapsOptDict;\n        keys = keysAndOpts.slice(0, keysAndOpts.length - 1);\n      }\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(GetAll, [opts, this].concat(slice.call(keys)), function(){});\n  };\n\n  RDBVal.prototype.min = function() {\n    var keys, keysAndOpts, opts, perhapsOptDict;\n    keysAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    opts = {};\n    keys = keysAndOpts;\n    if (keysAndOpts.length === 1) {\n      perhapsOptDict = keysAndOpts[0];\n      if (perhapsOptDict && ((Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase))) {\n        opts = perhapsOptDict;\n        keys = [];\n      }\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Min, [opts, this].concat(slice.call(keys.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.max = function() {\n    var keys, keysAndOpts, opts, perhapsOptDict;\n    keysAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    opts = {};\n    keys = keysAndOpts;\n    if (keysAndOpts.length === 1) {\n      perhapsOptDict = keysAndOpts[0];\n      if (perhapsOptDict && ((Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase))) {\n        opts = perhapsOptDict;\n        keys = [];\n      }\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Max, [opts, this].concat(slice.call(keys.map(funcWrap))), function(){});\n  };\n\n  RDBVal.prototype.insert = aropt(function(doc, opts) {\n    return new Insert(opts, this, rethinkdb.expr(doc));\n  });\n\n  RDBVal.prototype.indexCreate = varar(1, 3, function(name, defun_or_opts, opts) {\n    if (opts != null) {\n      return new IndexCreate(opts, this, name, funcWrap(defun_or_opts));\n    } else if (defun_or_opts != null) {\n      if ((Object.prototype.toString.call(defun_or_opts) === '[object Object]') && !(typeof defun_or_opts === 'function') && !(defun_or_opts instanceof TermBase)) {\n        return new IndexCreate(defun_or_opts, this, name);\n      } else {\n        return new IndexCreate({}, this, name, funcWrap(defun_or_opts));\n      }\n    } else {\n      return new IndexCreate({}, this, name);\n    }\n  });\n\n  RDBVal.prototype.indexDrop = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(IndexDrop, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.indexList = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(IndexList, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.indexStatus = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(IndexStatus, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.indexWait = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(IndexWait, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.indexRename = aropt(function(old_name, new_name, opts) {\n    return new IndexRename(opts, this, old_name, new_name);\n  });\n\n  RDBVal.prototype.reconfigure = function(opts) {\n    return new Reconfigure(opts, this);\n  };\n\n  RDBVal.prototype.rebalance = function() {\n    return new Rebalance({}, this);\n  };\n\n  RDBVal.prototype.sync = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Sync, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.grant = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Grant, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.toISO8601 = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ToISO8601, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.toEpochTime = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(ToEpochTime, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.inTimezone = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(InTimezone, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.during = aropt(function(t2, t3, opts) {\n    return new During(opts, this, t2, t3);\n  });\n\n  RDBVal.prototype.date = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(RQLDate, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.timeOfDay = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(TimeOfDay, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.timezone = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Timezone, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.year = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Year, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.month = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Month, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.day = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Day, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.dayOfWeek = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(DayOfWeek, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.dayOfYear = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(DayOfYear, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.hours = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Hours, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.minutes = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Minutes, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.seconds = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Seconds, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.uuid = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(UUID, [{}, this].concat(slice.call(args)), function(){});\n  };\n\n  RDBVal.prototype.getIntersecting = aropt(function(g, opts) {\n    return new GetIntersecting(opts, this, g);\n  });\n\n  RDBVal.prototype.getNearest = aropt(function(g, opts) {\n    return new GetNearest(opts, this, g);\n  });\n\n  return RDBVal;\n\n})(TermBase);\n\nDatumTerm = (function(superClass) {\n  extend(DatumTerm, superClass);\n\n  DatumTerm.prototype.args = [];\n\n  DatumTerm.prototype.optargs = {};\n\n  function DatumTerm(val) {\n    var self;\n    self = DatumTerm.__super__.constructor.call(this);\n    self.data = val;\n    return self;\n  }\n\n  DatumTerm.prototype.compose = function() {\n    switch (typeof this.data) {\n      case 'string':\n        return '\"' + this.data + '\"';\n      default:\n        return '' + this.data;\n    }\n  };\n\n  DatumTerm.prototype.build = function() {\n    if (typeof this.data === 'number') {\n      if (!isFinite(this.data)) {\n        throw new TypeError(\"Illegal non-finite number `\" + this.data.toString() + \"`.\");\n      }\n    }\n    return this.data;\n  };\n\n  return DatumTerm;\n\n})(RDBVal);\n\ntranslateBackOptargs = function(optargs) {\n  var key, result, val;\n  result = {};\n  for (key in optargs) {\n    if (!hasProp.call(optargs, key)) continue;\n    val = optargs[key];\n    result[util.toCamelCase(key)] = val;\n  }\n  return result;\n};\n\ntranslateOptargs = function(optargs) {\n  var key, result, val;\n  result = {};\n  for (key in optargs) {\n    if (!hasProp.call(optargs, key)) continue;\n    val = optargs[key];\n    if (key === void 0 || val === void 0) {\n      continue;\n    }\n    result[util.fromCamelCase(key)] = rethinkdb.expr(val);\n  }\n  return result;\n};\n\nRDBOp = (function(superClass) {\n  extend(RDBOp, superClass);\n\n  function RDBOp() {\n    var arg, args, i, optargs, self;\n    optargs = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    self = RDBOp.__super__.constructor.call(this);\n    self.args = (function() {\n      var j, len, results;\n      results = [];\n      for (i = j = 0, len = args.length; j < len; i = ++j) {\n        arg = args[i];\n        if (arg !== void 0) {\n          results.push(rethinkdb.expr(arg));\n        } else {\n          throw new err.ReqlDriverCompileError(\"Argument \" + i + \" to \" + (this.st || this.mt) + \" may not be `undefined`.\");\n        }\n      }\n      return results;\n    }).call(this);\n    self.optargs = translateOptargs(optargs);\n    return self;\n  }\n\n  RDBOp.prototype.build = function() {\n    var add_opts, arg, j, key, len, opts, ref, ref1, res, val;\n    res = [this.tt, []];\n    ref = this.args;\n    for (j = 0, len = ref.length; j < len; j++) {\n      arg = ref[j];\n      res[1].push(arg.build());\n    }\n    opts = {};\n    add_opts = false;\n    ref1 = this.optargs;\n    for (key in ref1) {\n      if (!hasProp.call(ref1, key)) continue;\n      val = ref1[key];\n      add_opts = true;\n      opts[key] = val.build();\n    }\n    if (add_opts) {\n      res.push(opts);\n    }\n    return res;\n  };\n\n  RDBOp.prototype.compose = function(args, optargs) {\n    if (this.st) {\n      return ['r.', this.st, '(', intspallargs(args, optargs), ')'];\n    } else {\n      if (shouldWrap(this.args[0])) {\n        args[0] = ['r(', args[0], ')'];\n      }\n      return [args[0], '.', this.mt, '(', intspallargs(args.slice(1), optargs), ')'];\n    }\n  };\n\n  return RDBOp;\n\n})(RDBVal);\n\nRDBConstant = (function(superClass) {\n  extend(RDBConstant, superClass);\n\n  function RDBConstant() {\n    return RDBConstant.__super__.constructor.apply(this, arguments);\n  }\n\n  RDBConstant.prototype.compose = function(args, optargs) {\n    return ['r.', this.st];\n  };\n\n  return RDBConstant;\n\n})(RDBOp);\n\nintsp = function(seq) {\n  var e, j, len, ref, res;\n  if (seq[0] == null) {\n    return [];\n  }\n  res = [seq[0]];\n  ref = seq.slice(1);\n  for (j = 0, len = ref.length; j < len; j++) {\n    e = ref[j];\n    res.push(', ', e);\n  }\n  return res;\n};\n\nkved = function(optargs) {\n  var k, v;\n  return [\n    '{', intsp((function() {\n      var results;\n      results = [];\n      for (k in optargs) {\n        if (!hasProp.call(optargs, k)) continue;\n        v = optargs[k];\n        results.push([JSON.stringify(k), ': ', v]);\n      }\n      return results;\n    })()), '}'\n  ];\n};\n\nintspallargs = function(args, optargs) {\n  var argrepr;\n  argrepr = [];\n  if (args.length > 0) {\n    argrepr.push(intsp(args));\n  }\n  if (Object.keys(optargs).length > 0) {\n    if (argrepr.length > 0) {\n      argrepr.push(', ');\n    }\n    argrepr.push(kved(translateBackOptargs(optargs)));\n  }\n  return argrepr;\n};\n\nshouldWrap = function(arg) {\n  return arg instanceof DatumTerm || arg instanceof MakeArray || arg instanceof MakeObject;\n};\n\nMakeArray = (function(superClass) {\n  extend(MakeArray, superClass);\n\n  function MakeArray() {\n    return MakeArray.__super__.constructor.apply(this, arguments);\n  }\n\n  MakeArray.prototype.tt = protoTermType.MAKE_ARRAY;\n\n  MakeArray.prototype.st = '[...]';\n\n  MakeArray.prototype.compose = function(args) {\n    return ['[', intsp(args), ']'];\n  };\n\n  return MakeArray;\n\n})(RDBOp);\n\nMakeObject = (function(superClass) {\n  extend(MakeObject, superClass);\n\n  MakeObject.prototype.tt = protoTermType.MAKE_OBJ;\n\n  MakeObject.prototype.st = '{...}';\n\n  function MakeObject(obj, nestingDepth) {\n    var key, self, val;\n    if (nestingDepth == null) {\n      nestingDepth = 20;\n    }\n    self = MakeObject.__super__.constructor.call(this, {});\n    self.optargs = {};\n    for (key in obj) {\n      if (!hasProp.call(obj, key)) continue;\n      val = obj[key];\n      if (typeof val === 'undefined') {\n        throw new err.ReqlDriverCompileError(\"Object field '\" + key + \"' may not be undefined\");\n      }\n      self.optargs[key] = rethinkdb.expr(val, nestingDepth - 1);\n    }\n    return self;\n  }\n\n  MakeObject.prototype.compose = function(args, optargs) {\n    return kved(optargs);\n  };\n\n  MakeObject.prototype.build = function() {\n    var key, ref, res, val;\n    res = {};\n    ref = this.optargs;\n    for (key in ref) {\n      if (!hasProp.call(ref, key)) continue;\n      val = ref[key];\n      res[key] = val.build();\n    }\n    return res;\n  };\n\n  return MakeObject;\n\n})(RDBOp);\n\nVar = (function(superClass) {\n  extend(Var, superClass);\n\n  function Var() {\n    return Var.__super__.constructor.apply(this, arguments);\n  }\n\n  Var.prototype.tt = protoTermType.VAR;\n\n  Var.prototype.compose = function(args) {\n    return ['var_' + args];\n  };\n\n  return Var;\n\n})(RDBOp);\n\nJavaScript = (function(superClass) {\n  extend(JavaScript, superClass);\n\n  function JavaScript() {\n    return JavaScript.__super__.constructor.apply(this, arguments);\n  }\n\n  JavaScript.prototype.tt = protoTermType.JAVASCRIPT;\n\n  JavaScript.prototype.st = 'js';\n\n  return JavaScript;\n\n})(RDBOp);\n\nHttp = (function(superClass) {\n  extend(Http, superClass);\n\n  function Http() {\n    return Http.__super__.constructor.apply(this, arguments);\n  }\n\n  Http.prototype.tt = protoTermType.HTTP;\n\n  Http.prototype.st = 'http';\n\n  return Http;\n\n})(RDBOp);\n\nJson = (function(superClass) {\n  extend(Json, superClass);\n\n  function Json() {\n    return Json.__super__.constructor.apply(this, arguments);\n  }\n\n  Json.prototype.tt = protoTermType.JSON;\n\n  Json.prototype.st = 'json';\n\n  return Json;\n\n})(RDBOp);\n\nBinary = (function(superClass) {\n  extend(Binary, superClass);\n\n  Binary.prototype.tt = protoTermType.BINARY;\n\n  Binary.prototype.st = 'binary';\n\n  function Binary(data) {\n    var self;\n    if (data instanceof TermBase) {\n      self = Binary.__super__.constructor.call(this, {}, data);\n    } else if (data instanceof Buffer) {\n      self = Binary.__super__.constructor.call(this);\n      self.base64_data = data.toString(\"base64\");\n    } else {\n      throw new TypeError(\"Parameter to `r.binary` must be a Buffer object or RQL query.\");\n    }\n    return self;\n  }\n\n  Binary.prototype.compose = function() {\n    if (this.args.length === 0) {\n      return 'r.binary(<data>)';\n    } else {\n      return Binary.__super__.compose.apply(this, arguments);\n    }\n  };\n\n  Binary.prototype.build = function() {\n    if (this.args.length === 0) {\n      return {\n        '$reql_type$': 'BINARY',\n        'data': this.base64_data\n      };\n    } else {\n      return Binary.__super__.build.apply(this, arguments);\n    }\n  };\n\n  return Binary;\n\n})(RDBOp);\n\nArgs = (function(superClass) {\n  extend(Args, superClass);\n\n  function Args() {\n    return Args.__super__.constructor.apply(this, arguments);\n  }\n\n  Args.prototype.tt = protoTermType.ARGS;\n\n  Args.prototype.st = 'args';\n\n  return Args;\n\n})(RDBOp);\n\nUserError = (function(superClass) {\n  extend(UserError, superClass);\n\n  function UserError() {\n    return UserError.__super__.constructor.apply(this, arguments);\n  }\n\n  UserError.prototype.tt = protoTermType.ERROR;\n\n  UserError.prototype.st = 'error';\n\n  return UserError;\n\n})(RDBOp);\n\nRandom = (function(superClass) {\n  extend(Random, superClass);\n\n  function Random() {\n    return Random.__super__.constructor.apply(this, arguments);\n  }\n\n  Random.prototype.tt = protoTermType.RANDOM;\n\n  Random.prototype.st = 'random';\n\n  return Random;\n\n})(RDBOp);\n\nImplicitVar = (function(superClass) {\n  extend(ImplicitVar, superClass);\n\n  function ImplicitVar() {\n    return ImplicitVar.__super__.constructor.apply(this, arguments);\n  }\n\n  ImplicitVar.prototype.tt = protoTermType.IMPLICIT_VAR;\n\n  ImplicitVar.prototype.compose = function() {\n    return ['r.row'];\n  };\n\n  return ImplicitVar;\n\n})(RDBOp);\n\nDb = (function(superClass) {\n  extend(Db, superClass);\n\n  function Db() {\n    return Db.__super__.constructor.apply(this, arguments);\n  }\n\n  Db.prototype.tt = protoTermType.DB;\n\n  Db.prototype.st = 'db';\n\n  return Db;\n\n})(RDBOp);\n\nTable = (function(superClass) {\n  extend(Table, superClass);\n\n  function Table() {\n    return Table.__super__.constructor.apply(this, arguments);\n  }\n\n  Table.prototype.tt = protoTermType.TABLE;\n\n  Table.prototype.st = 'table';\n\n  Table.prototype.compose = function(args, optargs) {\n    if (this.args[0] instanceof Db) {\n      return [args[0], '.table(', intspallargs(args.slice(1), optargs), ')'];\n    } else {\n      return ['r.table(', intspallargs(args, optargs), ')'];\n    }\n  };\n\n  return Table;\n\n})(RDBOp);\n\nGet = (function(superClass) {\n  extend(Get, superClass);\n\n  function Get() {\n    return Get.__super__.constructor.apply(this, arguments);\n  }\n\n  Get.prototype.tt = protoTermType.GET;\n\n  Get.prototype.mt = 'get';\n\n  return Get;\n\n})(RDBOp);\n\nGetAll = (function(superClass) {\n  extend(GetAll, superClass);\n\n  function GetAll() {\n    return GetAll.__super__.constructor.apply(this, arguments);\n  }\n\n  GetAll.prototype.tt = protoTermType.GET_ALL;\n\n  GetAll.prototype.mt = 'getAll';\n\n  return GetAll;\n\n})(RDBOp);\n\nEq = (function(superClass) {\n  extend(Eq, superClass);\n\n  function Eq() {\n    return Eq.__super__.constructor.apply(this, arguments);\n  }\n\n  Eq.prototype.tt = protoTermType.EQ;\n\n  Eq.prototype.mt = 'eq';\n\n  return Eq;\n\n})(RDBOp);\n\nNe = (function(superClass) {\n  extend(Ne, superClass);\n\n  function Ne() {\n    return Ne.__super__.constructor.apply(this, arguments);\n  }\n\n  Ne.prototype.tt = protoTermType.NE;\n\n  Ne.prototype.mt = 'ne';\n\n  return Ne;\n\n})(RDBOp);\n\nLt = (function(superClass) {\n  extend(Lt, superClass);\n\n  function Lt() {\n    return Lt.__super__.constructor.apply(this, arguments);\n  }\n\n  Lt.prototype.tt = protoTermType.LT;\n\n  Lt.prototype.mt = 'lt';\n\n  return Lt;\n\n})(RDBOp);\n\nLe = (function(superClass) {\n  extend(Le, superClass);\n\n  function Le() {\n    return Le.__super__.constructor.apply(this, arguments);\n  }\n\n  Le.prototype.tt = protoTermType.LE;\n\n  Le.prototype.mt = 'le';\n\n  return Le;\n\n})(RDBOp);\n\nGt = (function(superClass) {\n  extend(Gt, superClass);\n\n  function Gt() {\n    return Gt.__super__.constructor.apply(this, arguments);\n  }\n\n  Gt.prototype.tt = protoTermType.GT;\n\n  Gt.prototype.mt = 'gt';\n\n  return Gt;\n\n})(RDBOp);\n\nGe = (function(superClass) {\n  extend(Ge, superClass);\n\n  function Ge() {\n    return Ge.__super__.constructor.apply(this, arguments);\n  }\n\n  Ge.prototype.tt = protoTermType.GE;\n\n  Ge.prototype.mt = 'ge';\n\n  return Ge;\n\n})(RDBOp);\n\nNot = (function(superClass) {\n  extend(Not, superClass);\n\n  function Not() {\n    return Not.__super__.constructor.apply(this, arguments);\n  }\n\n  Not.prototype.tt = protoTermType.NOT;\n\n  Not.prototype.mt = 'not';\n\n  return Not;\n\n})(RDBOp);\n\nAdd = (function(superClass) {\n  extend(Add, superClass);\n\n  function Add() {\n    return Add.__super__.constructor.apply(this, arguments);\n  }\n\n  Add.prototype.tt = protoTermType.ADD;\n\n  Add.prototype.mt = 'add';\n\n  return Add;\n\n})(RDBOp);\n\nSub = (function(superClass) {\n  extend(Sub, superClass);\n\n  function Sub() {\n    return Sub.__super__.constructor.apply(this, arguments);\n  }\n\n  Sub.prototype.tt = protoTermType.SUB;\n\n  Sub.prototype.mt = 'sub';\n\n  return Sub;\n\n})(RDBOp);\n\nMul = (function(superClass) {\n  extend(Mul, superClass);\n\n  function Mul() {\n    return Mul.__super__.constructor.apply(this, arguments);\n  }\n\n  Mul.prototype.tt = protoTermType.MUL;\n\n  Mul.prototype.mt = 'mul';\n\n  return Mul;\n\n})(RDBOp);\n\nDiv = (function(superClass) {\n  extend(Div, superClass);\n\n  function Div() {\n    return Div.__super__.constructor.apply(this, arguments);\n  }\n\n  Div.prototype.tt = protoTermType.DIV;\n\n  Div.prototype.mt = 'div';\n\n  return Div;\n\n})(RDBOp);\n\nMod = (function(superClass) {\n  extend(Mod, superClass);\n\n  function Mod() {\n    return Mod.__super__.constructor.apply(this, arguments);\n  }\n\n  Mod.prototype.tt = protoTermType.MOD;\n\n  Mod.prototype.mt = 'mod';\n\n  return Mod;\n\n})(RDBOp);\n\nFloor = (function(superClass) {\n  extend(Floor, superClass);\n\n  function Floor() {\n    return Floor.__super__.constructor.apply(this, arguments);\n  }\n\n  Floor.prototype.tt = protoTermType.FLOOR;\n\n  Floor.prototype.mt = 'floor';\n\n  return Floor;\n\n})(RDBOp);\n\nCeil = (function(superClass) {\n  extend(Ceil, superClass);\n\n  function Ceil() {\n    return Ceil.__super__.constructor.apply(this, arguments);\n  }\n\n  Ceil.prototype.tt = protoTermType.CEIL;\n\n  Ceil.prototype.mt = 'ceil';\n\n  return Ceil;\n\n})(RDBOp);\n\nRound = (function(superClass) {\n  extend(Round, superClass);\n\n  function Round() {\n    return Round.__super__.constructor.apply(this, arguments);\n  }\n\n  Round.prototype.tt = protoTermType.ROUND;\n\n  Round.prototype.mt = 'round';\n\n  return Round;\n\n})(RDBOp);\n\nAppend = (function(superClass) {\n  extend(Append, superClass);\n\n  function Append() {\n    return Append.__super__.constructor.apply(this, arguments);\n  }\n\n  Append.prototype.tt = protoTermType.APPEND;\n\n  Append.prototype.mt = 'append';\n\n  return Append;\n\n})(RDBOp);\n\nPrepend = (function(superClass) {\n  extend(Prepend, superClass);\n\n  function Prepend() {\n    return Prepend.__super__.constructor.apply(this, arguments);\n  }\n\n  Prepend.prototype.tt = protoTermType.PREPEND;\n\n  Prepend.prototype.mt = 'prepend';\n\n  return Prepend;\n\n})(RDBOp);\n\nDifference = (function(superClass) {\n  extend(Difference, superClass);\n\n  function Difference() {\n    return Difference.__super__.constructor.apply(this, arguments);\n  }\n\n  Difference.prototype.tt = protoTermType.DIFFERENCE;\n\n  Difference.prototype.mt = 'difference';\n\n  return Difference;\n\n})(RDBOp);\n\nSetInsert = (function(superClass) {\n  extend(SetInsert, superClass);\n\n  function SetInsert() {\n    return SetInsert.__super__.constructor.apply(this, arguments);\n  }\n\n  SetInsert.prototype.tt = protoTermType.SET_INSERT;\n\n  SetInsert.prototype.mt = 'setInsert';\n\n  return SetInsert;\n\n})(RDBOp);\n\nSetUnion = (function(superClass) {\n  extend(SetUnion, superClass);\n\n  function SetUnion() {\n    return SetUnion.__super__.constructor.apply(this, arguments);\n  }\n\n  SetUnion.prototype.tt = protoTermType.SET_UNION;\n\n  SetUnion.prototype.mt = 'setUnion';\n\n  return SetUnion;\n\n})(RDBOp);\n\nSetIntersection = (function(superClass) {\n  extend(SetIntersection, superClass);\n\n  function SetIntersection() {\n    return SetIntersection.__super__.constructor.apply(this, arguments);\n  }\n\n  SetIntersection.prototype.tt = protoTermType.SET_INTERSECTION;\n\n  SetIntersection.prototype.mt = 'setIntersection';\n\n  return SetIntersection;\n\n})(RDBOp);\n\nSetDifference = (function(superClass) {\n  extend(SetDifference, superClass);\n\n  function SetDifference() {\n    return SetDifference.__super__.constructor.apply(this, arguments);\n  }\n\n  SetDifference.prototype.tt = protoTermType.SET_DIFFERENCE;\n\n  SetDifference.prototype.mt = 'setDifference';\n\n  return SetDifference;\n\n})(RDBOp);\n\nSlice = (function(superClass) {\n  extend(Slice, superClass);\n\n  function Slice() {\n    return Slice.__super__.constructor.apply(this, arguments);\n  }\n\n  Slice.prototype.tt = protoTermType.SLICE;\n\n  Slice.prototype.mt = 'slice';\n\n  return Slice;\n\n})(RDBOp);\n\nSkip = (function(superClass) {\n  extend(Skip, superClass);\n\n  function Skip() {\n    return Skip.__super__.constructor.apply(this, arguments);\n  }\n\n  Skip.prototype.tt = protoTermType.SKIP;\n\n  Skip.prototype.mt = 'skip';\n\n  return Skip;\n\n})(RDBOp);\n\nLimit = (function(superClass) {\n  extend(Limit, superClass);\n\n  function Limit() {\n    return Limit.__super__.constructor.apply(this, arguments);\n  }\n\n  Limit.prototype.tt = protoTermType.LIMIT;\n\n  Limit.prototype.mt = 'limit';\n\n  return Limit;\n\n})(RDBOp);\n\nGetField = (function(superClass) {\n  extend(GetField, superClass);\n\n  function GetField() {\n    return GetField.__super__.constructor.apply(this, arguments);\n  }\n\n  GetField.prototype.tt = protoTermType.GET_FIELD;\n\n  GetField.prototype.mt = 'getField';\n\n  return GetField;\n\n})(RDBOp);\n\nBracket = (function(superClass) {\n  extend(Bracket, superClass);\n\n  function Bracket() {\n    return Bracket.__super__.constructor.apply(this, arguments);\n  }\n\n  Bracket.prototype.tt = protoTermType.BRACKET;\n\n  Bracket.prototype.st = '(...)';\n\n  Bracket.prototype.compose = function(args) {\n    return [args[0], '(', args[1], ')'];\n  };\n\n  return Bracket;\n\n})(RDBOp);\n\nContains = (function(superClass) {\n  extend(Contains, superClass);\n\n  function Contains() {\n    return Contains.__super__.constructor.apply(this, arguments);\n  }\n\n  Contains.prototype.tt = protoTermType.CONTAINS;\n\n  Contains.prototype.mt = 'contains';\n\n  return Contains;\n\n})(RDBOp);\n\nInsertAt = (function(superClass) {\n  extend(InsertAt, superClass);\n\n  function InsertAt() {\n    return InsertAt.__super__.constructor.apply(this, arguments);\n  }\n\n  InsertAt.prototype.tt = protoTermType.INSERT_AT;\n\n  InsertAt.prototype.mt = 'insertAt';\n\n  return InsertAt;\n\n})(RDBOp);\n\nSpliceAt = (function(superClass) {\n  extend(SpliceAt, superClass);\n\n  function SpliceAt() {\n    return SpliceAt.__super__.constructor.apply(this, arguments);\n  }\n\n  SpliceAt.prototype.tt = protoTermType.SPLICE_AT;\n\n  SpliceAt.prototype.mt = 'spliceAt';\n\n  return SpliceAt;\n\n})(RDBOp);\n\nDeleteAt = (function(superClass) {\n  extend(DeleteAt, superClass);\n\n  function DeleteAt() {\n    return DeleteAt.__super__.constructor.apply(this, arguments);\n  }\n\n  DeleteAt.prototype.tt = protoTermType.DELETE_AT;\n\n  DeleteAt.prototype.mt = 'deleteAt';\n\n  return DeleteAt;\n\n})(RDBOp);\n\nChangeAt = (function(superClass) {\n  extend(ChangeAt, superClass);\n\n  function ChangeAt() {\n    return ChangeAt.__super__.constructor.apply(this, arguments);\n  }\n\n  ChangeAt.prototype.tt = protoTermType.CHANGE_AT;\n\n  ChangeAt.prototype.mt = 'changeAt';\n\n  return ChangeAt;\n\n})(RDBOp);\n\nHasFields = (function(superClass) {\n  extend(HasFields, superClass);\n\n  function HasFields() {\n    return HasFields.__super__.constructor.apply(this, arguments);\n  }\n\n  HasFields.prototype.tt = protoTermType.HAS_FIELDS;\n\n  HasFields.prototype.mt = 'hasFields';\n\n  return HasFields;\n\n})(RDBOp);\n\nWithFields = (function(superClass) {\n  extend(WithFields, superClass);\n\n  function WithFields() {\n    return WithFields.__super__.constructor.apply(this, arguments);\n  }\n\n  WithFields.prototype.tt = protoTermType.WITH_FIELDS;\n\n  WithFields.prototype.mt = 'withFields';\n\n  return WithFields;\n\n})(RDBOp);\n\nKeys = (function(superClass) {\n  extend(Keys, superClass);\n\n  function Keys() {\n    return Keys.__super__.constructor.apply(this, arguments);\n  }\n\n  Keys.prototype.tt = protoTermType.KEYS;\n\n  Keys.prototype.mt = 'keys';\n\n  return Keys;\n\n})(RDBOp);\n\nValues = (function(superClass) {\n  extend(Values, superClass);\n\n  function Values() {\n    return Values.__super__.constructor.apply(this, arguments);\n  }\n\n  Values.prototype.tt = protoTermType.VALUES;\n\n  Values.prototype.mt = 'values';\n\n  return Values;\n\n})(RDBOp);\n\nChanges = (function(superClass) {\n  extend(Changes, superClass);\n\n  function Changes() {\n    return Changes.__super__.constructor.apply(this, arguments);\n  }\n\n  Changes.prototype.tt = protoTermType.CHANGES;\n\n  Changes.prototype.mt = 'changes';\n\n  return Changes;\n\n})(RDBOp);\n\nObject_ = (function(superClass) {\n  extend(Object_, superClass);\n\n  function Object_() {\n    return Object_.__super__.constructor.apply(this, arguments);\n  }\n\n  Object_.prototype.tt = protoTermType.OBJECT;\n\n  Object_.prototype.mt = 'object';\n\n  return Object_;\n\n})(RDBOp);\n\nPluck = (function(superClass) {\n  extend(Pluck, superClass);\n\n  function Pluck() {\n    return Pluck.__super__.constructor.apply(this, arguments);\n  }\n\n  Pluck.prototype.tt = protoTermType.PLUCK;\n\n  Pluck.prototype.mt = 'pluck';\n\n  return Pluck;\n\n})(RDBOp);\n\nOffsetsOf = (function(superClass) {\n  extend(OffsetsOf, superClass);\n\n  function OffsetsOf() {\n    return OffsetsOf.__super__.constructor.apply(this, arguments);\n  }\n\n  OffsetsOf.prototype.tt = protoTermType.OFFSETS_OF;\n\n  OffsetsOf.prototype.mt = 'offsetsOf';\n\n  return OffsetsOf;\n\n})(RDBOp);\n\nWithout = (function(superClass) {\n  extend(Without, superClass);\n\n  function Without() {\n    return Without.__super__.constructor.apply(this, arguments);\n  }\n\n  Without.prototype.tt = protoTermType.WITHOUT;\n\n  Without.prototype.mt = 'without';\n\n  return Without;\n\n})(RDBOp);\n\nMerge = (function(superClass) {\n  extend(Merge, superClass);\n\n  function Merge() {\n    return Merge.__super__.constructor.apply(this, arguments);\n  }\n\n  Merge.prototype.tt = protoTermType.MERGE;\n\n  Merge.prototype.mt = 'merge';\n\n  return Merge;\n\n})(RDBOp);\n\nBetween = (function(superClass) {\n  extend(Between, superClass);\n\n  function Between() {\n    return Between.__super__.constructor.apply(this, arguments);\n  }\n\n  Between.prototype.tt = protoTermType.BETWEEN;\n\n  Between.prototype.mt = 'between';\n\n  return Between;\n\n})(RDBOp);\n\nReduce = (function(superClass) {\n  extend(Reduce, superClass);\n\n  function Reduce() {\n    return Reduce.__super__.constructor.apply(this, arguments);\n  }\n\n  Reduce.prototype.tt = protoTermType.REDUCE;\n\n  Reduce.prototype.mt = 'reduce';\n\n  return Reduce;\n\n})(RDBOp);\n\nMap = (function(superClass) {\n  extend(Map, superClass);\n\n  function Map() {\n    return Map.__super__.constructor.apply(this, arguments);\n  }\n\n  Map.prototype.tt = protoTermType.MAP;\n\n  Map.prototype.mt = 'map';\n\n  return Map;\n\n})(RDBOp);\n\nFold = (function(superClass) {\n  extend(Fold, superClass);\n\n  function Fold() {\n    return Fold.__super__.constructor.apply(this, arguments);\n  }\n\n  Fold.prototype.tt = protoTermType.FOLD;\n\n  Fold.prototype.mt = 'fold';\n\n  return Fold;\n\n})(RDBOp);\n\nFilter = (function(superClass) {\n  extend(Filter, superClass);\n\n  function Filter() {\n    return Filter.__super__.constructor.apply(this, arguments);\n  }\n\n  Filter.prototype.tt = protoTermType.FILTER;\n\n  Filter.prototype.mt = 'filter';\n\n  return Filter;\n\n})(RDBOp);\n\nConcatMap = (function(superClass) {\n  extend(ConcatMap, superClass);\n\n  function ConcatMap() {\n    return ConcatMap.__super__.constructor.apply(this, arguments);\n  }\n\n  ConcatMap.prototype.tt = protoTermType.CONCAT_MAP;\n\n  ConcatMap.prototype.mt = 'concatMap';\n\n  return ConcatMap;\n\n})(RDBOp);\n\nOrderBy = (function(superClass) {\n  extend(OrderBy, superClass);\n\n  function OrderBy() {\n    return OrderBy.__super__.constructor.apply(this, arguments);\n  }\n\n  OrderBy.prototype.tt = protoTermType.ORDER_BY;\n\n  OrderBy.prototype.mt = 'orderBy';\n\n  return OrderBy;\n\n})(RDBOp);\n\nDistinct = (function(superClass) {\n  extend(Distinct, superClass);\n\n  function Distinct() {\n    return Distinct.__super__.constructor.apply(this, arguments);\n  }\n\n  Distinct.prototype.tt = protoTermType.DISTINCT;\n\n  Distinct.prototype.mt = 'distinct';\n\n  return Distinct;\n\n})(RDBOp);\n\nCount = (function(superClass) {\n  extend(Count, superClass);\n\n  function Count() {\n    return Count.__super__.constructor.apply(this, arguments);\n  }\n\n  Count.prototype.tt = protoTermType.COUNT;\n\n  Count.prototype.mt = 'count';\n\n  return Count;\n\n})(RDBOp);\n\nUnion = (function(superClass) {\n  extend(Union, superClass);\n\n  function Union() {\n    return Union.__super__.constructor.apply(this, arguments);\n  }\n\n  Union.prototype.tt = protoTermType.UNION;\n\n  Union.prototype.mt = 'union';\n\n  return Union;\n\n})(RDBOp);\n\nNth = (function(superClass) {\n  extend(Nth, superClass);\n\n  function Nth() {\n    return Nth.__super__.constructor.apply(this, arguments);\n  }\n\n  Nth.prototype.tt = protoTermType.NTH;\n\n  Nth.prototype.mt = 'nth';\n\n  return Nth;\n\n})(RDBOp);\n\nToJsonString = (function(superClass) {\n  extend(ToJsonString, superClass);\n\n  function ToJsonString() {\n    return ToJsonString.__super__.constructor.apply(this, arguments);\n  }\n\n  ToJsonString.prototype.tt = protoTermType.TO_JSON_STRING;\n\n  ToJsonString.prototype.mt = 'toJsonString';\n\n  return ToJsonString;\n\n})(RDBOp);\n\nMatch = (function(superClass) {\n  extend(Match, superClass);\n\n  function Match() {\n    return Match.__super__.constructor.apply(this, arguments);\n  }\n\n  Match.prototype.tt = protoTermType.MATCH;\n\n  Match.prototype.mt = 'match';\n\n  return Match;\n\n})(RDBOp);\n\nSplit = (function(superClass) {\n  extend(Split, superClass);\n\n  function Split() {\n    return Split.__super__.constructor.apply(this, arguments);\n  }\n\n  Split.prototype.tt = protoTermType.SPLIT;\n\n  Split.prototype.mt = 'split';\n\n  return Split;\n\n})(RDBOp);\n\nUpcase = (function(superClass) {\n  extend(Upcase, superClass);\n\n  function Upcase() {\n    return Upcase.__super__.constructor.apply(this, arguments);\n  }\n\n  Upcase.prototype.tt = protoTermType.UPCASE;\n\n  Upcase.prototype.mt = 'upcase';\n\n  return Upcase;\n\n})(RDBOp);\n\nDowncase = (function(superClass) {\n  extend(Downcase, superClass);\n\n  function Downcase() {\n    return Downcase.__super__.constructor.apply(this, arguments);\n  }\n\n  Downcase.prototype.tt = protoTermType.DOWNCASE;\n\n  Downcase.prototype.mt = 'downcase';\n\n  return Downcase;\n\n})(RDBOp);\n\nIsEmpty = (function(superClass) {\n  extend(IsEmpty, superClass);\n\n  function IsEmpty() {\n    return IsEmpty.__super__.constructor.apply(this, arguments);\n  }\n\n  IsEmpty.prototype.tt = protoTermType.IS_EMPTY;\n\n  IsEmpty.prototype.mt = 'isEmpty';\n\n  return IsEmpty;\n\n})(RDBOp);\n\nGroup = (function(superClass) {\n  extend(Group, superClass);\n\n  function Group() {\n    return Group.__super__.constructor.apply(this, arguments);\n  }\n\n  Group.prototype.tt = protoTermType.GROUP;\n\n  Group.prototype.mt = 'group';\n\n  return Group;\n\n})(RDBOp);\n\nSum = (function(superClass) {\n  extend(Sum, superClass);\n\n  function Sum() {\n    return Sum.__super__.constructor.apply(this, arguments);\n  }\n\n  Sum.prototype.tt = protoTermType.SUM;\n\n  Sum.prototype.mt = 'sum';\n\n  return Sum;\n\n})(RDBOp);\n\nAvg = (function(superClass) {\n  extend(Avg, superClass);\n\n  function Avg() {\n    return Avg.__super__.constructor.apply(this, arguments);\n  }\n\n  Avg.prototype.tt = protoTermType.AVG;\n\n  Avg.prototype.mt = 'avg';\n\n  return Avg;\n\n})(RDBOp);\n\nMin = (function(superClass) {\n  extend(Min, superClass);\n\n  function Min() {\n    return Min.__super__.constructor.apply(this, arguments);\n  }\n\n  Min.prototype.tt = protoTermType.MIN;\n\n  Min.prototype.mt = 'min';\n\n  return Min;\n\n})(RDBOp);\n\nMax = (function(superClass) {\n  extend(Max, superClass);\n\n  function Max() {\n    return Max.__super__.constructor.apply(this, arguments);\n  }\n\n  Max.prototype.tt = protoTermType.MAX;\n\n  Max.prototype.mt = 'max';\n\n  return Max;\n\n})(RDBOp);\n\nInnerJoin = (function(superClass) {\n  extend(InnerJoin, superClass);\n\n  function InnerJoin() {\n    return InnerJoin.__super__.constructor.apply(this, arguments);\n  }\n\n  InnerJoin.prototype.tt = protoTermType.INNER_JOIN;\n\n  InnerJoin.prototype.mt = 'innerJoin';\n\n  return InnerJoin;\n\n})(RDBOp);\n\nOuterJoin = (function(superClass) {\n  extend(OuterJoin, superClass);\n\n  function OuterJoin() {\n    return OuterJoin.__super__.constructor.apply(this, arguments);\n  }\n\n  OuterJoin.prototype.tt = protoTermType.OUTER_JOIN;\n\n  OuterJoin.prototype.mt = 'outerJoin';\n\n  return OuterJoin;\n\n})(RDBOp);\n\nEqJoin = (function(superClass) {\n  extend(EqJoin, superClass);\n\n  function EqJoin() {\n    return EqJoin.__super__.constructor.apply(this, arguments);\n  }\n\n  EqJoin.prototype.tt = protoTermType.EQ_JOIN;\n\n  EqJoin.prototype.mt = 'eqJoin';\n\n  return EqJoin;\n\n})(RDBOp);\n\nZip = (function(superClass) {\n  extend(Zip, superClass);\n\n  function Zip() {\n    return Zip.__super__.constructor.apply(this, arguments);\n  }\n\n  Zip.prototype.tt = protoTermType.ZIP;\n\n  Zip.prototype.mt = 'zip';\n\n  return Zip;\n\n})(RDBOp);\n\nRange = (function(superClass) {\n  extend(Range, superClass);\n\n  function Range() {\n    return Range.__super__.constructor.apply(this, arguments);\n  }\n\n  Range.prototype.tt = protoTermType.RANGE;\n\n  Range.prototype.st = 'range';\n\n  return Range;\n\n})(RDBOp);\n\nCoerceTo = (function(superClass) {\n  extend(CoerceTo, superClass);\n\n  function CoerceTo() {\n    return CoerceTo.__super__.constructor.apply(this, arguments);\n  }\n\n  CoerceTo.prototype.tt = protoTermType.COERCE_TO;\n\n  CoerceTo.prototype.mt = 'coerceTo';\n\n  return CoerceTo;\n\n})(RDBOp);\n\nUngroup = (function(superClass) {\n  extend(Ungroup, superClass);\n\n  function Ungroup() {\n    return Ungroup.__super__.constructor.apply(this, arguments);\n  }\n\n  Ungroup.prototype.tt = protoTermType.UNGROUP;\n\n  Ungroup.prototype.mt = 'ungroup';\n\n  return Ungroup;\n\n})(RDBOp);\n\nTypeOf = (function(superClass) {\n  extend(TypeOf, superClass);\n\n  function TypeOf() {\n    return TypeOf.__super__.constructor.apply(this, arguments);\n  }\n\n  TypeOf.prototype.tt = protoTermType.TYPE_OF;\n\n  TypeOf.prototype.mt = 'typeOf';\n\n  return TypeOf;\n\n})(RDBOp);\n\nInfo = (function(superClass) {\n  extend(Info, superClass);\n\n  function Info() {\n    return Info.__super__.constructor.apply(this, arguments);\n  }\n\n  Info.prototype.tt = protoTermType.INFO;\n\n  Info.prototype.mt = 'info';\n\n  return Info;\n\n})(RDBOp);\n\nSample = (function(superClass) {\n  extend(Sample, superClass);\n\n  function Sample() {\n    return Sample.__super__.constructor.apply(this, arguments);\n  }\n\n  Sample.prototype.tt = protoTermType.SAMPLE;\n\n  Sample.prototype.mt = 'sample';\n\n  return Sample;\n\n})(RDBOp);\n\nUpdate = (function(superClass) {\n  extend(Update, superClass);\n\n  function Update() {\n    return Update.__super__.constructor.apply(this, arguments);\n  }\n\n  Update.prototype.tt = protoTermType.UPDATE;\n\n  Update.prototype.mt = 'update';\n\n  return Update;\n\n})(RDBOp);\n\nDelete = (function(superClass) {\n  extend(Delete, superClass);\n\n  function Delete() {\n    return Delete.__super__.constructor.apply(this, arguments);\n  }\n\n  Delete.prototype.tt = protoTermType.DELETE;\n\n  Delete.prototype.mt = 'delete';\n\n  return Delete;\n\n})(RDBOp);\n\nReplace = (function(superClass) {\n  extend(Replace, superClass);\n\n  function Replace() {\n    return Replace.__super__.constructor.apply(this, arguments);\n  }\n\n  Replace.prototype.tt = protoTermType.REPLACE;\n\n  Replace.prototype.mt = 'replace';\n\n  return Replace;\n\n})(RDBOp);\n\nInsert = (function(superClass) {\n  extend(Insert, superClass);\n\n  function Insert() {\n    return Insert.__super__.constructor.apply(this, arguments);\n  }\n\n  Insert.prototype.tt = protoTermType.INSERT;\n\n  Insert.prototype.mt = 'insert';\n\n  return Insert;\n\n})(RDBOp);\n\nDbCreate = (function(superClass) {\n  extend(DbCreate, superClass);\n\n  function DbCreate() {\n    return DbCreate.__super__.constructor.apply(this, arguments);\n  }\n\n  DbCreate.prototype.tt = protoTermType.DB_CREATE;\n\n  DbCreate.prototype.st = 'dbCreate';\n\n  return DbCreate;\n\n})(RDBOp);\n\nDbDrop = (function(superClass) {\n  extend(DbDrop, superClass);\n\n  function DbDrop() {\n    return DbDrop.__super__.constructor.apply(this, arguments);\n  }\n\n  DbDrop.prototype.tt = protoTermType.DB_DROP;\n\n  DbDrop.prototype.st = 'dbDrop';\n\n  return DbDrop;\n\n})(RDBOp);\n\nDbList = (function(superClass) {\n  extend(DbList, superClass);\n\n  function DbList() {\n    return DbList.__super__.constructor.apply(this, arguments);\n  }\n\n  DbList.prototype.tt = protoTermType.DB_LIST;\n\n  DbList.prototype.st = 'dbList';\n\n  return DbList;\n\n})(RDBOp);\n\nTableCreate = (function(superClass) {\n  extend(TableCreate, superClass);\n\n  function TableCreate() {\n    return TableCreate.__super__.constructor.apply(this, arguments);\n  }\n\n  TableCreate.prototype.tt = protoTermType.TABLE_CREATE;\n\n  TableCreate.prototype.mt = 'tableCreate';\n\n  return TableCreate;\n\n})(RDBOp);\n\nTableDrop = (function(superClass) {\n  extend(TableDrop, superClass);\n\n  function TableDrop() {\n    return TableDrop.__super__.constructor.apply(this, arguments);\n  }\n\n  TableDrop.prototype.tt = protoTermType.TABLE_DROP;\n\n  TableDrop.prototype.mt = 'tableDrop';\n\n  return TableDrop;\n\n})(RDBOp);\n\nTableList = (function(superClass) {\n  extend(TableList, superClass);\n\n  function TableList() {\n    return TableList.__super__.constructor.apply(this, arguments);\n  }\n\n  TableList.prototype.tt = protoTermType.TABLE_LIST;\n\n  TableList.prototype.mt = 'tableList';\n\n  return TableList;\n\n})(RDBOp);\n\nIndexCreate = (function(superClass) {\n  extend(IndexCreate, superClass);\n\n  function IndexCreate() {\n    return IndexCreate.__super__.constructor.apply(this, arguments);\n  }\n\n  IndexCreate.prototype.tt = protoTermType.INDEX_CREATE;\n\n  IndexCreate.prototype.mt = 'indexCreate';\n\n  return IndexCreate;\n\n})(RDBOp);\n\nIndexDrop = (function(superClass) {\n  extend(IndexDrop, superClass);\n\n  function IndexDrop() {\n    return IndexDrop.__super__.constructor.apply(this, arguments);\n  }\n\n  IndexDrop.prototype.tt = protoTermType.INDEX_DROP;\n\n  IndexDrop.prototype.mt = 'indexDrop';\n\n  return IndexDrop;\n\n})(RDBOp);\n\nIndexRename = (function(superClass) {\n  extend(IndexRename, superClass);\n\n  function IndexRename() {\n    return IndexRename.__super__.constructor.apply(this, arguments);\n  }\n\n  IndexRename.prototype.tt = protoTermType.INDEX_RENAME;\n\n  IndexRename.prototype.mt = 'indexRename';\n\n  return IndexRename;\n\n})(RDBOp);\n\nIndexList = (function(superClass) {\n  extend(IndexList, superClass);\n\n  function IndexList() {\n    return IndexList.__super__.constructor.apply(this, arguments);\n  }\n\n  IndexList.prototype.tt = protoTermType.INDEX_LIST;\n\n  IndexList.prototype.mt = 'indexList';\n\n  return IndexList;\n\n})(RDBOp);\n\nIndexStatus = (function(superClass) {\n  extend(IndexStatus, superClass);\n\n  function IndexStatus() {\n    return IndexStatus.__super__.constructor.apply(this, arguments);\n  }\n\n  IndexStatus.prototype.tt = protoTermType.INDEX_STATUS;\n\n  IndexStatus.prototype.mt = 'indexStatus';\n\n  return IndexStatus;\n\n})(RDBOp);\n\nIndexWait = (function(superClass) {\n  extend(IndexWait, superClass);\n\n  function IndexWait() {\n    return IndexWait.__super__.constructor.apply(this, arguments);\n  }\n\n  IndexWait.prototype.tt = protoTermType.INDEX_WAIT;\n\n  IndexWait.prototype.mt = 'indexWait';\n\n  return IndexWait;\n\n})(RDBOp);\n\nConfig = (function(superClass) {\n  extend(Config, superClass);\n\n  function Config() {\n    return Config.__super__.constructor.apply(this, arguments);\n  }\n\n  Config.prototype.tt = protoTermType.CONFIG;\n\n  Config.prototype.mt = 'config';\n\n  return Config;\n\n})(RDBOp);\n\nStatus = (function(superClass) {\n  extend(Status, superClass);\n\n  function Status() {\n    return Status.__super__.constructor.apply(this, arguments);\n  }\n\n  Status.prototype.tt = protoTermType.STATUS;\n\n  Status.prototype.mt = 'status';\n\n  return Status;\n\n})(RDBOp);\n\nWait = (function(superClass) {\n  extend(Wait, superClass);\n\n  function Wait() {\n    return Wait.__super__.constructor.apply(this, arguments);\n  }\n\n  Wait.prototype.tt = protoTermType.WAIT;\n\n  Wait.prototype.mt = 'wait';\n\n  return Wait;\n\n})(RDBOp);\n\nReconfigure = (function(superClass) {\n  extend(Reconfigure, superClass);\n\n  function Reconfigure() {\n    return Reconfigure.__super__.constructor.apply(this, arguments);\n  }\n\n  Reconfigure.prototype.tt = protoTermType.RECONFIGURE;\n\n  Reconfigure.prototype.mt = 'reconfigure';\n\n  return Reconfigure;\n\n})(RDBOp);\n\nRebalance = (function(superClass) {\n  extend(Rebalance, superClass);\n\n  function Rebalance() {\n    return Rebalance.__super__.constructor.apply(this, arguments);\n  }\n\n  Rebalance.prototype.tt = protoTermType.REBALANCE;\n\n  Rebalance.prototype.mt = 'rebalance';\n\n  return Rebalance;\n\n})(RDBOp);\n\nSync = (function(superClass) {\n  extend(Sync, superClass);\n\n  function Sync() {\n    return Sync.__super__.constructor.apply(this, arguments);\n  }\n\n  Sync.prototype.tt = protoTermType.SYNC;\n\n  Sync.prototype.mt = 'sync';\n\n  return Sync;\n\n})(RDBOp);\n\nGrant = (function(superClass) {\n  extend(Grant, superClass);\n\n  function Grant() {\n    return Grant.__super__.constructor.apply(this, arguments);\n  }\n\n  Grant.prototype.tt = protoTermType.GRANT;\n\n  Grant.prototype.mt = 'grant';\n\n  return Grant;\n\n})(RDBOp);\n\nFunCall = (function(superClass) {\n  extend(FunCall, superClass);\n\n  function FunCall() {\n    return FunCall.__super__.constructor.apply(this, arguments);\n  }\n\n  FunCall.prototype.tt = protoTermType.FUNCALL;\n\n  FunCall.prototype.st = 'do';\n\n  FunCall.prototype.compose = function(args) {\n    if (args.length > 2) {\n      return ['r.do(', intsp(args.slice(1)), ', ', args[0], ')'];\n    } else {\n      if (shouldWrap(this.args[1])) {\n        args[1] = ['r(', args[1], ')'];\n      }\n      return [args[1], '.do(', args[0], ')'];\n    }\n  };\n\n  return FunCall;\n\n})(RDBOp);\n\nDefault = (function(superClass) {\n  extend(Default, superClass);\n\n  function Default() {\n    return Default.__super__.constructor.apply(this, arguments);\n  }\n\n  Default.prototype.tt = protoTermType.DEFAULT;\n\n  Default.prototype.mt = 'default';\n\n  return Default;\n\n})(RDBOp);\n\nBranch = (function(superClass) {\n  extend(Branch, superClass);\n\n  function Branch() {\n    return Branch.__super__.constructor.apply(this, arguments);\n  }\n\n  Branch.prototype.tt = protoTermType.BRANCH;\n\n  Branch.prototype.st = 'branch';\n\n  return Branch;\n\n})(RDBOp);\n\nOr = (function(superClass) {\n  extend(Or, superClass);\n\n  function Or() {\n    return Or.__super__.constructor.apply(this, arguments);\n  }\n\n  Or.prototype.tt = protoTermType.OR;\n\n  Or.prototype.mt = 'or';\n\n  return Or;\n\n})(RDBOp);\n\nAnd = (function(superClass) {\n  extend(And, superClass);\n\n  function And() {\n    return And.__super__.constructor.apply(this, arguments);\n  }\n\n  And.prototype.tt = protoTermType.AND;\n\n  And.prototype.mt = 'and';\n\n  return And;\n\n})(RDBOp);\n\nForEach = (function(superClass) {\n  extend(ForEach, superClass);\n\n  function ForEach() {\n    return ForEach.__super__.constructor.apply(this, arguments);\n  }\n\n  ForEach.prototype.tt = protoTermType.FOR_EACH;\n\n  ForEach.prototype.mt = 'forEach';\n\n  return ForEach;\n\n})(RDBOp);\n\nFunc = (function(superClass) {\n  extend(Func, superClass);\n\n  Func.prototype.tt = protoTermType.FUNC;\n\n  Func.nextVarId = 0;\n\n  function Func(optargs, func) {\n    var argNums, args, argsArr, body, i;\n    args = [];\n    argNums = [];\n    i = 0;\n    while (i < func.length) {\n      argNums.push(Func.nextVarId);\n      args.push(new Var({}, Func.nextVarId));\n      Func.nextVarId++;\n      i++;\n    }\n    body = func.apply(null, args);\n    if (body === void 0) {\n      throw new err.ReqlDriverCompileError(\"Anonymous function returned `undefined`. Did you forget a `return`?\");\n    }\n    argsArr = (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(MakeArray, [{}].concat(slice.call(argNums)), function(){});\n    return Func.__super__.constructor.call(this, optargs, argsArr, body);\n  }\n\n  Func.prototype.compose = function(args) {\n    var arg, i, j, len, ref, varStr;\n    if (hasImplicit(args[1]) === true) {\n      return [args[1]];\n    } else {\n      varStr = \"\";\n      ref = args[0][1];\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        arg = ref[i];\n        if (i % 2 === 0) {\n          varStr += Var.prototype.compose(arg);\n        } else {\n          varStr += arg;\n        }\n      }\n      return ['function(', varStr, ') { return ', args[1], '; }'];\n    }\n  };\n\n  return Func;\n\n})(RDBOp);\n\nAsc = (function(superClass) {\n  extend(Asc, superClass);\n\n  function Asc() {\n    return Asc.__super__.constructor.apply(this, arguments);\n  }\n\n  Asc.prototype.tt = protoTermType.ASC;\n\n  Asc.prototype.st = 'asc';\n\n  return Asc;\n\n})(RDBOp);\n\nDesc = (function(superClass) {\n  extend(Desc, superClass);\n\n  function Desc() {\n    return Desc.__super__.constructor.apply(this, arguments);\n  }\n\n  Desc.prototype.tt = protoTermType.DESC;\n\n  Desc.prototype.st = 'desc';\n\n  return Desc;\n\n})(RDBOp);\n\nLiteral = (function(superClass) {\n  extend(Literal, superClass);\n\n  function Literal() {\n    return Literal.__super__.constructor.apply(this, arguments);\n  }\n\n  Literal.prototype.tt = protoTermType.LITERAL;\n\n  Literal.prototype.st = 'literal';\n\n  return Literal;\n\n})(RDBOp);\n\nISO8601 = (function(superClass) {\n  extend(ISO8601, superClass);\n\n  function ISO8601() {\n    return ISO8601.__super__.constructor.apply(this, arguments);\n  }\n\n  ISO8601.prototype.tt = protoTermType.ISO8601;\n\n  ISO8601.prototype.st = 'ISO8601';\n\n  return ISO8601;\n\n})(RDBOp);\n\nToISO8601 = (function(superClass) {\n  extend(ToISO8601, superClass);\n\n  function ToISO8601() {\n    return ToISO8601.__super__.constructor.apply(this, arguments);\n  }\n\n  ToISO8601.prototype.tt = protoTermType.TO_ISO8601;\n\n  ToISO8601.prototype.mt = 'toISO8601';\n\n  return ToISO8601;\n\n})(RDBOp);\n\nEpochTime = (function(superClass) {\n  extend(EpochTime, superClass);\n\n  function EpochTime() {\n    return EpochTime.__super__.constructor.apply(this, arguments);\n  }\n\n  EpochTime.prototype.tt = protoTermType.EPOCH_TIME;\n\n  EpochTime.prototype.st = 'epochTime';\n\n  return EpochTime;\n\n})(RDBOp);\n\nToEpochTime = (function(superClass) {\n  extend(ToEpochTime, superClass);\n\n  function ToEpochTime() {\n    return ToEpochTime.__super__.constructor.apply(this, arguments);\n  }\n\n  ToEpochTime.prototype.tt = protoTermType.TO_EPOCH_TIME;\n\n  ToEpochTime.prototype.mt = 'toEpochTime';\n\n  return ToEpochTime;\n\n})(RDBOp);\n\nNow = (function(superClass) {\n  extend(Now, superClass);\n\n  function Now() {\n    return Now.__super__.constructor.apply(this, arguments);\n  }\n\n  Now.prototype.tt = protoTermType.NOW;\n\n  Now.prototype.st = 'now';\n\n  return Now;\n\n})(RDBOp);\n\nInTimezone = (function(superClass) {\n  extend(InTimezone, superClass);\n\n  function InTimezone() {\n    return InTimezone.__super__.constructor.apply(this, arguments);\n  }\n\n  InTimezone.prototype.tt = protoTermType.IN_TIMEZONE;\n\n  InTimezone.prototype.mt = 'inTimezone';\n\n  return InTimezone;\n\n})(RDBOp);\n\nDuring = (function(superClass) {\n  extend(During, superClass);\n\n  function During() {\n    return During.__super__.constructor.apply(this, arguments);\n  }\n\n  During.prototype.tt = protoTermType.DURING;\n\n  During.prototype.mt = 'during';\n\n  return During;\n\n})(RDBOp);\n\nRQLDate = (function(superClass) {\n  extend(RQLDate, superClass);\n\n  function RQLDate() {\n    return RQLDate.__super__.constructor.apply(this, arguments);\n  }\n\n  RQLDate.prototype.tt = protoTermType.DATE;\n\n  RQLDate.prototype.mt = 'date';\n\n  return RQLDate;\n\n})(RDBOp);\n\nTimeOfDay = (function(superClass) {\n  extend(TimeOfDay, superClass);\n\n  function TimeOfDay() {\n    return TimeOfDay.__super__.constructor.apply(this, arguments);\n  }\n\n  TimeOfDay.prototype.tt = protoTermType.TIME_OF_DAY;\n\n  TimeOfDay.prototype.mt = 'timeOfDay';\n\n  return TimeOfDay;\n\n})(RDBOp);\n\nTimezone = (function(superClass) {\n  extend(Timezone, superClass);\n\n  function Timezone() {\n    return Timezone.__super__.constructor.apply(this, arguments);\n  }\n\n  Timezone.prototype.tt = protoTermType.TIMEZONE;\n\n  Timezone.prototype.mt = 'timezone';\n\n  return Timezone;\n\n})(RDBOp);\n\nYear = (function(superClass) {\n  extend(Year, superClass);\n\n  function Year() {\n    return Year.__super__.constructor.apply(this, arguments);\n  }\n\n  Year.prototype.tt = protoTermType.YEAR;\n\n  Year.prototype.mt = 'year';\n\n  return Year;\n\n})(RDBOp);\n\nMonth = (function(superClass) {\n  extend(Month, superClass);\n\n  function Month() {\n    return Month.__super__.constructor.apply(this, arguments);\n  }\n\n  Month.prototype.tt = protoTermType.MONTH;\n\n  Month.prototype.mt = 'month';\n\n  return Month;\n\n})(RDBOp);\n\nDay = (function(superClass) {\n  extend(Day, superClass);\n\n  function Day() {\n    return Day.__super__.constructor.apply(this, arguments);\n  }\n\n  Day.prototype.tt = protoTermType.DAY;\n\n  Day.prototype.mt = 'day';\n\n  return Day;\n\n})(RDBOp);\n\nDayOfWeek = (function(superClass) {\n  extend(DayOfWeek, superClass);\n\n  function DayOfWeek() {\n    return DayOfWeek.__super__.constructor.apply(this, arguments);\n  }\n\n  DayOfWeek.prototype.tt = protoTermType.DAY_OF_WEEK;\n\n  DayOfWeek.prototype.mt = 'dayOfWeek';\n\n  return DayOfWeek;\n\n})(RDBOp);\n\nDayOfYear = (function(superClass) {\n  extend(DayOfYear, superClass);\n\n  function DayOfYear() {\n    return DayOfYear.__super__.constructor.apply(this, arguments);\n  }\n\n  DayOfYear.prototype.tt = protoTermType.DAY_OF_YEAR;\n\n  DayOfYear.prototype.mt = 'dayOfYear';\n\n  return DayOfYear;\n\n})(RDBOp);\n\nHours = (function(superClass) {\n  extend(Hours, superClass);\n\n  function Hours() {\n    return Hours.__super__.constructor.apply(this, arguments);\n  }\n\n  Hours.prototype.tt = protoTermType.HOURS;\n\n  Hours.prototype.mt = 'hours';\n\n  return Hours;\n\n})(RDBOp);\n\nMinutes = (function(superClass) {\n  extend(Minutes, superClass);\n\n  function Minutes() {\n    return Minutes.__super__.constructor.apply(this, arguments);\n  }\n\n  Minutes.prototype.tt = protoTermType.MINUTES;\n\n  Minutes.prototype.mt = 'minutes';\n\n  return Minutes;\n\n})(RDBOp);\n\nSeconds = (function(superClass) {\n  extend(Seconds, superClass);\n\n  function Seconds() {\n    return Seconds.__super__.constructor.apply(this, arguments);\n  }\n\n  Seconds.prototype.tt = protoTermType.SECONDS;\n\n  Seconds.prototype.mt = 'seconds';\n\n  return Seconds;\n\n})(RDBOp);\n\nTime = (function(superClass) {\n  extend(Time, superClass);\n\n  function Time() {\n    return Time.__super__.constructor.apply(this, arguments);\n  }\n\n  Time.prototype.tt = protoTermType.TIME;\n\n  Time.prototype.st = 'time';\n\n  return Time;\n\n})(RDBOp);\n\nGeojson = (function(superClass) {\n  extend(Geojson, superClass);\n\n  function Geojson() {\n    return Geojson.__super__.constructor.apply(this, arguments);\n  }\n\n  Geojson.prototype.tt = protoTermType.GEOJSON;\n\n  Geojson.prototype.st = 'geojson';\n\n  return Geojson;\n\n})(RDBOp);\n\nToGeojson = (function(superClass) {\n  extend(ToGeojson, superClass);\n\n  function ToGeojson() {\n    return ToGeojson.__super__.constructor.apply(this, arguments);\n  }\n\n  ToGeojson.prototype.tt = protoTermType.TO_GEOJSON;\n\n  ToGeojson.prototype.mt = 'toGeojson';\n\n  return ToGeojson;\n\n})(RDBOp);\n\nPoint = (function(superClass) {\n  extend(Point, superClass);\n\n  function Point() {\n    return Point.__super__.constructor.apply(this, arguments);\n  }\n\n  Point.prototype.tt = protoTermType.POINT;\n\n  Point.prototype.st = 'point';\n\n  return Point;\n\n})(RDBOp);\n\nLine = (function(superClass) {\n  extend(Line, superClass);\n\n  function Line() {\n    return Line.__super__.constructor.apply(this, arguments);\n  }\n\n  Line.prototype.tt = protoTermType.LINE;\n\n  Line.prototype.st = 'line';\n\n  return Line;\n\n})(RDBOp);\n\nPolygon = (function(superClass) {\n  extend(Polygon, superClass);\n\n  function Polygon() {\n    return Polygon.__super__.constructor.apply(this, arguments);\n  }\n\n  Polygon.prototype.tt = protoTermType.POLYGON;\n\n  Polygon.prototype.st = 'polygon';\n\n  return Polygon;\n\n})(RDBOp);\n\nDistance = (function(superClass) {\n  extend(Distance, superClass);\n\n  function Distance() {\n    return Distance.__super__.constructor.apply(this, arguments);\n  }\n\n  Distance.prototype.tt = protoTermType.DISTANCE;\n\n  Distance.prototype.mt = 'distance';\n\n  return Distance;\n\n})(RDBOp);\n\nIntersects = (function(superClass) {\n  extend(Intersects, superClass);\n\n  function Intersects() {\n    return Intersects.__super__.constructor.apply(this, arguments);\n  }\n\n  Intersects.prototype.tt = protoTermType.INTERSECTS;\n\n  Intersects.prototype.mt = 'intersects';\n\n  return Intersects;\n\n})(RDBOp);\n\nIncludes = (function(superClass) {\n  extend(Includes, superClass);\n\n  function Includes() {\n    return Includes.__super__.constructor.apply(this, arguments);\n  }\n\n  Includes.prototype.tt = protoTermType.INCLUDES;\n\n  Includes.prototype.mt = 'includes';\n\n  return Includes;\n\n})(RDBOp);\n\nCircle = (function(superClass) {\n  extend(Circle, superClass);\n\n  function Circle() {\n    return Circle.__super__.constructor.apply(this, arguments);\n  }\n\n  Circle.prototype.tt = protoTermType.CIRCLE;\n\n  Circle.prototype.st = 'circle';\n\n  return Circle;\n\n})(RDBOp);\n\nGetIntersecting = (function(superClass) {\n  extend(GetIntersecting, superClass);\n\n  function GetIntersecting() {\n    return GetIntersecting.__super__.constructor.apply(this, arguments);\n  }\n\n  GetIntersecting.prototype.tt = protoTermType.GET_INTERSECTING;\n\n  GetIntersecting.prototype.mt = 'getIntersecting';\n\n  return GetIntersecting;\n\n})(RDBOp);\n\nGetNearest = (function(superClass) {\n  extend(GetNearest, superClass);\n\n  function GetNearest() {\n    return GetNearest.__super__.constructor.apply(this, arguments);\n  }\n\n  GetNearest.prototype.tt = protoTermType.GET_NEAREST;\n\n  GetNearest.prototype.mt = 'getNearest';\n\n  return GetNearest;\n\n})(RDBOp);\n\nFill = (function(superClass) {\n  extend(Fill, superClass);\n\n  function Fill() {\n    return Fill.__super__.constructor.apply(this, arguments);\n  }\n\n  Fill.prototype.tt = protoTermType.FILL;\n\n  Fill.prototype.mt = 'fill';\n\n  return Fill;\n\n})(RDBOp);\n\nPolygonSub = (function(superClass) {\n  extend(PolygonSub, superClass);\n\n  function PolygonSub() {\n    return PolygonSub.__super__.constructor.apply(this, arguments);\n  }\n\n  PolygonSub.prototype.tt = protoTermType.POLYGON_SUB;\n\n  PolygonSub.prototype.mt = 'polygonSub';\n\n  return PolygonSub;\n\n})(RDBOp);\n\nUUID = (function(superClass) {\n  extend(UUID, superClass);\n\n  function UUID() {\n    return UUID.__super__.constructor.apply(this, arguments);\n  }\n\n  UUID.prototype.tt = protoTermType.UUID;\n\n  UUID.prototype.st = 'uuid';\n\n  return UUID;\n\n})(RDBOp);\n\nrethinkdb.expr = varar(1, 2, function(val, nestingDepth) {\n  var v;\n  if (nestingDepth == null) {\n    nestingDepth = 20;\n  }\n  if (val === void 0) {\n    throw new err.ReqlDriverCompileError(\"Cannot wrap undefined with r.expr().\");\n  }\n  if (nestingDepth <= 0) {\n    throw new err.ReqlDriverCompileError(\"Nesting depth limit exceeded.\");\n  }\n  if (typeof nestingDepth !== \"number\" || isNaN(nestingDepth)) {\n    throw new err.ReqlDriverCompileError(\"Second argument to `r.expr` must be a number or undefined.\");\n  } else if (val instanceof TermBase) {\n    return val;\n  } else if (typeof val === 'function') {\n    return new Func({}, val);\n  } else if (val instanceof Date) {\n    return new ISO8601({}, val.toISOString());\n  } else if (val instanceof Buffer) {\n    return new Binary(val);\n  } else if (Array.isArray(val)) {\n    val = (function() {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = val.length; j < len; j++) {\n        v = val[j];\n        results.push(rethinkdb.expr(v, nestingDepth - 1));\n      }\n      return results;\n    })();\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(MakeArray, [{}].concat(slice.call(val)), function(){});\n  } else if (typeof val === 'number') {\n    return new DatumTerm(val);\n  } else if (Object.prototype.toString.call(val) === '[object Object]') {\n    return new MakeObject(val, nestingDepth);\n  } else {\n    return new DatumTerm(val);\n  }\n});\n\nrethinkdb.js = aropt(function(jssrc, opts) {\n  return new JavaScript(opts, jssrc);\n});\n\nrethinkdb.http = aropt(function(url, opts) {\n  return new Http(opts, url);\n});\n\nrethinkdb.json = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Json, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.error = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(UserError, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.random = function() {\n  var limits, limitsAndOpts, opts, perhapsOptDict;\n  limitsAndOpts = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  opts = {};\n  limits = limitsAndOpts;\n  perhapsOptDict = limitsAndOpts[limitsAndOpts.length - 1];\n  if (perhapsOptDict && ((Object.prototype.toString.call(perhapsOptDict) === '[object Object]') && !(perhapsOptDict instanceof TermBase))) {\n    opts = perhapsOptDict;\n    limits = limitsAndOpts.slice(0, limitsAndOpts.length - 1);\n  }\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Random, [opts].concat(slice.call(limits)), function(){});\n};\n\nrethinkdb.binary = ar(function(data) {\n  return new Binary(data);\n});\n\nrethinkdb.row = new ImplicitVar({});\n\nrethinkdb.table = aropt(function(tblName, opts) {\n  return new Table(opts, tblName);\n});\n\nrethinkdb.db = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Db, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.dbCreate = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(DbCreate, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.dbDrop = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(DbDrop, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.dbList = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(DbList, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.tableCreate = aropt(function(tblName, opts) {\n  return new TableCreate(opts, tblName);\n});\n\nrethinkdb.tableDrop = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(TableDrop, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.tableList = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(TableList, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.grant = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Grant, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb[\"do\"] = varar(1, null, function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(FunCall, [{}, funcWrap(args.slice(-1)[0])].concat(slice.call(args.slice(0, -1))), function(){});\n});\n\nrethinkdb.branch = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Branch, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.map = varar(1, null, function() {\n  var args, funcArg, j;\n  args = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), funcArg = arguments[j++];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Map, [{}].concat(slice.call(args), [funcWrap(funcArg)]), function(){});\n});\n\nrethinkdb.group = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Group, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.reduce = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Reduce, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.count = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Count, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.sum = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Sum, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.avg = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Avg, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.min = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Min, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.max = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Max, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.distinct = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Distinct, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.contains = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Contains, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.asc = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Asc, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.desc = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Desc, [{}].concat(slice.call(args.map(funcWrap))), function(){});\n};\n\nrethinkdb.eq = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Eq, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.ne = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Ne, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.lt = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Lt, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.le = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Le, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.gt = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Gt, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.ge = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Ge, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.or = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Or, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.and = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(And, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.not = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Not, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.add = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Add, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.sub = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Sub, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.div = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Div, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.mul = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Mul, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.mod = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Mod, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.floor = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Floor, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.ceil = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Ceil, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.round = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Round, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.typeOf = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(TypeOf, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.info = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Info, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.literal = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Literal, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.ISO8601 = aropt(function(str, opts) {\n  return new ISO8601(opts, str);\n});\n\nrethinkdb.epochTime = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(EpochTime, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.now = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Now, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.time = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Time, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.monday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.MONDAY;\n\n  _Class.prototype.st = 'monday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.tuesday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.TUESDAY;\n\n  _Class.prototype.st = 'tuesday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.wednesday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.WEDNESDAY;\n\n  _Class.prototype.st = 'wednesday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.thursday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.THURSDAY;\n\n  _Class.prototype.st = 'thursday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.friday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.FRIDAY;\n\n  _Class.prototype.st = 'friday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.saturday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.SATURDAY;\n\n  _Class.prototype.st = 'saturday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.sunday = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.SUNDAY;\n\n  _Class.prototype.st = 'sunday';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.january = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.JANUARY;\n\n  _Class.prototype.st = 'january';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.february = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.FEBRUARY;\n\n  _Class.prototype.st = 'february';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.march = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.MARCH;\n\n  _Class.prototype.st = 'march';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.april = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.APRIL;\n\n  _Class.prototype.st = 'april';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.may = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.MAY;\n\n  _Class.prototype.st = 'may';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.june = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.JUNE;\n\n  _Class.prototype.st = 'june';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.july = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.JULY;\n\n  _Class.prototype.st = 'july';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.august = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.AUGUST;\n\n  _Class.prototype.st = 'august';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.september = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.SEPTEMBER;\n\n  _Class.prototype.st = 'september';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.october = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.OCTOBER;\n\n  _Class.prototype.st = 'october';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.november = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.NOVEMBER;\n\n  _Class.prototype.st = 'november';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.december = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.DECEMBER;\n\n  _Class.prototype.st = 'december';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.minval = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.MINVAL;\n\n  _Class.prototype.st = 'minval';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.maxval = new ((function(superClass) {\n  extend(_Class, superClass);\n\n  function _Class() {\n    return _Class.__super__.constructor.apply(this, arguments);\n  }\n\n  _Class.prototype.tt = protoTermType.MAXVAL;\n\n  _Class.prototype.st = 'maxval';\n\n  return _Class;\n\n})(RDBConstant))();\n\nrethinkdb.object = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Object_, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.args = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Args, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.geojson = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Geojson, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.point = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Point, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.line = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Line, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.polygon = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Polygon, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.intersects = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Intersects, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.distance = aropt(function(g1, g2, opts) {\n  return new Distance(opts, g1, g2);\n});\n\nrethinkdb.circle = aropt(function(cen, rad, opts) {\n  return new Circle(opts, cen, rad);\n});\n\nrethinkdb.uuid = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(UUID, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.range = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Range, [{}].concat(slice.call(args)), function(){});\n};\n\nrethinkdb.union = function() {\n  var args;\n  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  return (function(func, args, ctor) {\n    ctor.prototype = func.prototype;\n    var child = new ctor, result = func.apply(child, args);\n    return Object(result) === result ? result : child;\n  })(Union, [{}].concat(slice.call(args)), function(){});\n};\n\nmodule.exports = rethinkdb;\n"}